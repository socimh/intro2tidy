[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "tidyverse 入门",
    "section": "",
    "text": "前言\n这是香港科技大学博士候选人沈明宏（mhshenaa@connect.ust.hk）建立的R语言教程，欢迎大家阅读。\n本教程为2024年香港科技大学（广州）的《R 语言 tidyverse 入门》暑期工作坊做了一些调整。\n工作坊的当前日程安排如下：\n\n6月4日 （前言，第1-3章）工作坊概览；介绍 R, tidyverse, tibble 和 statart；如何导入、探索、导出数据等\n6月11日 使用 dplyr 和 statart 清理数据\n6月18日 使用 ggplot 和 statart 等跑回归及可视化\n\n6月25日 使用 stringr 处理文本数据及可视化\n\n7月2日 使用 forcats 处理类别数据及可视化，使用 lubridate 等处理时间数据\n7月9日 使用 tidyr 和 dplyr 等处理复杂数据及可视化\n7月23日 使用 purrr 处理高维度数据及可视化\n8月6日 回归模型与可视化的高级技巧\n8月13日 使用 sf 和 stars 等处理空间数据及可视化\n如有时间：使用 officer 等自动编辑文档\n如有时间：使用 tidygraph 和 ggraph 处理网络数据\n\n本网站和本工作坊的所有资料均免费开放，采用 CC BY-NC-ND 4.0 许可协议进行许可。未经允许，不得用作任何商业用途。"
  },
  {
    "objectID": "intro.html#r-的劣势",
    "href": "intro.html#r-的劣势",
    "title": "1  R 语言简介",
    "section": "1.1 R 的劣势",
    "text": "1.1 R 的劣势\n假设一趟京广高铁总共要经过15个车站，那么相当于有210个区间组合。如果一名乘客购买了一张从北京到广州的车票，那就意味着要在210个区间上锁定这个座位，避免重复出票。放眼全国，无数的列车交织成一张巨大的数据网络，这需要一套非常先进的算法。所以12306需要用Java来开发，不可能用R。类似地，C++使用舞蹈链（Dancing Links）算法解开一个数独，所需时间不到1毫秒，这显然也是R做不到的。\n假设有一个宏观经济学问题，需要求解一个抛物型偏微分方程，我们需要用到Schmidt, Crank-Nicolson, 或 Du Fort and Frankel 的方法。这时，Matlab 或 Julia 会是最合适的软件，因为它们内置了很多实用的函数，而且计算速度也很不错。\n假设你手头有几百万条招聘广告。你希望用一套简单的指令调用GPT-4或其他AI引擎的API，批量地阅读这些广告，并给每条广告贴一个“职业类别”的标签。当前，最好用的软件是Python，因为它有最成熟的接入Openai的方案。\n假设你拿到了一套调查数据，需要处理变量标签、数值标签，也需要画模型拟合图，那么Stata再适合不过了。\n假设有200多名学员报名了2024年云南大学的暑期班，他们的学校、专业、推荐人等信息都记录在一张表里。他们可能会写邮件说无法参加。有的同学也可能临时加入。有一些学生的特殊情况需要写备注或标记出来。这张表格可能需要在好几个人之间转手，调整不同的内容。鉴于这些需求，Excel显然是最好用的软件，而R的代码就太显累赘了。\n综上所述，R不擅长处理大数据、不擅长算法、不擅长科学计算、不擅长人工智能、不擅长处理变量标签、不擅长编辑繁琐的表格。在很多问题上，都有更强大的替代软件。"
  },
  {
    "objectID": "intro.html#r-的优势",
    "href": "intro.html#r-的优势",
    "title": "1  R 语言简介",
    "section": "1.2 R 的优势",
    "text": "1.2 R 的优势\n虽然R不擅长这些，但是R仍然可以完成上面大多数的任务。R可以做矩阵运算，可以调用C++，可以接入Openai的API，可以分析调查数据，可以模仿marginslot，可以逐个单元格编辑表格。R还可以爬取网页，可以机器学习，可以深度学习，可以分析五花八门的数据，可以输出多种多样的图表。\nR 语言封装了大量的实用函数。在我看来，在所有软件中，R 对统计相关函数的覆盖最为全面，在很多任务上优于 Stata 和 Python，当然更优于 Excel 和 C++。此外，相比 R 的强大功能，它的代码并不复杂。\n\n一体化，功能覆盖了统计学和数据科学的绝大多数领域\n相比“上位”软件，清晰、简洁、易读写\n相比“下位”软件，免费、灵活、功能全\n大量公开、免费、详实、易懂的学习资源"
  },
  {
    "objectID": "intro.html#r-的下载",
    "href": "intro.html#r-的下载",
    "title": "1  R 语言简介",
    "section": "1.3 R 的下载",
    "text": "1.3 R 的下载\n您可以前往 R 的官网下载最新版本的 R。\n\n\n\n\n\n您也可以在RStudio的官网下载 RStudio。\n\n\n\n\n\n顾名思义，RStudio 就是 R 的工作室。我们知道，编程语言需要写代码，但我们通常不会用 txt 文本文档来写；集成开发环境（IDE）才是我们写代码最合适的地方。Posit 公司开发的 RStudio 就是当下最全能、最热门的 R 语言 IDE。\n顺带一提，现在也有很多 R 用户使用微软的 Visual Studio Code (VS Code)。这是一个更综合的 IDE，可以兼容各种各样的编程语言。\n\n\n\n\n\n这是一个非常干净的RStudio的界面。左上角的部分是源文件窗口，用来阅读和书写代码；左下角的部分是控制台（console），用来输出代码的运行结果；右上角的窗口罗列了当前环境（environment）中的对象（objects），也可以用来查看已执行的代码；右下角的窗口整合了文件、图像、包（packages）、帮助等功能。\n\nRStudio 提供了一些实用的快捷键，现阶段我们只需要记住一个：Ctrl/Cmd + Enter运行选中代码。"
  },
  {
    "objectID": "intro.html#配置-copilot",
    "href": "intro.html#配置-copilot",
    "title": "1  R 语言简介",
    "section": "1.4 配置 Copilot",
    "text": "1.4 配置 Copilot\nAI时代，写代码不能少了Copilot。请参考这篇公众号文章，在RStudio中配置Copilot。它可以帮你自动补全代码。\nCopilot 有很多使用方法，其核心逻辑是通过代码文件中现有的内容来预测你接下来想写的东西。比方说，如果你想批量地对数据中的变量名做某一种操作，那么大约有下列步骤：\n\n打印数据的变量名列表\n把数据的变量名列表粘贴到代码文件中\n写1-2行代码示例\n等待 Copilot 自动补全，然后按 tab 键同意\n把光标移到整段代码的上方，键入井号（#），让 Copilot 自动生成注释\n\n注意，一般来说，Copilot 只会填补句尾、整行或整段的空白。换句话说，你需要把光标移动到句末或者空白行，它才会开始运转。当光标在句中或句首时，别再痴痴地等着它来填补啦。"
  },
  {
    "objectID": "intro.html#简单的代码",
    "href": "intro.html#简单的代码",
    "title": "1  R 语言简介",
    "section": "1.5 简单的代码",
    "text": "1.5 简单的代码\n安装好了 R 和 RStudio，我们就可以尝试一些简单的代码了。比方说，我们可以在 R 里面直接进行四则运算：\n\n1 + 1\n\n[1] 2\n\n# 用 3, 4, 5, 9 算 24 点\n(4 + 9 - 5) * 3\n\n[1] 24\n\n\n在 R 里面，可以用引号包裹多语言文本：\n\n# 使用英文的单引号 '' 或双引号 \"\" 表示文本\n\"你好，R！\"\n\n[1] \"你好，R！\"\n\n\n也可以调用函数完成更复杂的任务：\n\n# 用 sqrt() 开平方根\nsqrt(25)\n\n[1] 5\n\n# 用 nchar() 数字符数\nnchar(\"你好\")\n\n[1] 2\n\n\n此外，我们可以把一些结果存储下来，以便后期调用：\n\n# 赋值 a 为 123\na &lt;- 123\n# 查看 a 的值\na\n\n[1] 123\n\n# 计算 a 乘以 2\na * 2\n\n[1] 246\n\n# 赋值 b 为 a 乘以 2 的结果\nb &lt;- a * 2\n# 查看 b 的值\nb\n\n[1] 246"
  },
  {
    "objectID": "intro.html#安装-r-包",
    "href": "intro.html#安装-r-包",
    "title": "1  R 语言简介",
    "section": "1.6 安装 R 包",
    "text": "1.6 安装 R 包\n在本书中，我们主要需要用到 tidyverse 包和 statart 包。在继续下面的内容之前，请让我们先下载这两个包：\n\n# 下载 tidyverse\ninstall.packages(\"tidyverse\")\n# 下载 statart\ndevtools::install_github(\"socimh/statart\")"
  },
  {
    "objectID": "intro.html#对象和类型",
    "href": "intro.html#对象和类型",
    "title": "1  R 语言简介",
    "section": "1.7 对象和类型",
    "text": "1.7 对象和类型\n好，在刚才的例子里，我们其实接触了很多 R 里面的对象（object）。我们可以使用 statart 包里的 s_type() 函数来判断对象的类型（type）：\n\nlibrary(statart)\n\n\n# 实数（double）\ns_type(25)\n\n[1] \"double\"\n\n# 字符（character）\ns_type(\"你好，R！\")\n\n[1] \"character\"\n\n# 函数（function）\ns_type(sqrt)\n\n[1] \"function\"\n\n\n函数通常都以 f() 的形式出现，带有圆括号。"
  },
  {
    "objectID": "intro.html#数据和函数",
    "href": "intro.html#数据和函数",
    "title": "1  R 语言简介",
    "section": "1.8 数据和函数",
    "text": "1.8 数据和函数\n所以，在前面一小节的几行代码里，我们已经接触了实数（double）、字符（character）和函数（function）这三种对象了。反过来说，上述代码基本都是由对象组成的。\n我们可以把对象大致分为数据（data）和函数。广义的“数据”类似于信息（information），比方说 25 和 \"你好\"，只要有实际内容就行。当然，这和我们日常生活中的用法有所不同。我眼中的数据，可以涵盖衣食住行等我们生活中任何有实际意义的东西。\n\n\n\n\n\n\n笔记\n\n\n\n所有信息，都可以是数据。\n\n\n如果代码中只有数据，那它通常做不了什么。打个比方，数据就像是名词，而一堆名词是零散的，无法组成句子。“头、明月、头、故乡”，这不成一句话；“举头望明月，低头思故乡”有了动词的“润滑”，就可以串联成一句话了。函数就像是动词。\n\n\n\n\n\n\n笔记\n\n\n\n在 R 语言里，数据（data）通常像名词，而函数（functions）通常像动词。"
  },
  {
    "objectID": "intro.html#数据的维度",
    "href": "intro.html#数据的维度",
    "title": "1  R 语言简介",
    "section": "1.9 数据的维度",
    "text": "1.9 数据的维度\nR 语言是一门分析数据的语言。但是，数据的种类那么多，我们要如何上手呢？我想从数据的维度说起。\n随着 3D 电影和 VR 设备的普及，我们可以看到三维立体的视频。3D 的 D 就是维度（dimension）的意思。在我看来，我们常用的数据也有四种维度：零维、一维、二维和多维。\n\n\n\n\n  \n    \n      维度\n      几何意义\n      数据意义\n      R 语言范例\n    \n  \n  \n    \n    零维（0D）\n    点\n    值\n    数、字符等\n    \n    \n    一维（1D）\n    线\n    列\n    数列、字符向量等\n    \n    \n    二维（2D）\n    面\n    表格\n    矩阵、tibble等\n    \n    \n    \n    多维（nD）\n    多维空间\n    数组（array）\n    数组、多级列表等\n    \n  \n\n零维的数据就是值。比方说，我们讲中国有14亿人，“14亿”就是一个零维的数据；广东简称“粤”，则“粤”这个字也可以视作零维的数据。\n一维的数据是列，或者说多个值的集合。这在我们生活中很常见。比方说，1到10的数列就是一维的数据；再比如，中国所有省份的名称，就构成一列字符，或者叫字符向量（character vector）。\n二维的数据是表，或者说多列的集合。这也是我们生活中最常见的数据维度，像 Excel 一打开就是二维数据的处理面板。这里不做赘述。\n多维的数据是数组，是由低维数据一层层集合上来得到的。一个例子是时间：秒、分、时、天、月、年，向上集合，最终组成了一个六维的数据。年包括月，月包括天，以此类推。我们说“2008年8月8日 20时00分00秒”，其实就是指定了六个维度，指向时间的六维空间中特定的那一个时点——北京奥运会开幕的那个瞬间。"
  },
  {
    "objectID": "intro.html#r-工作流程",
    "href": "intro.html#r-工作流程",
    "title": "1  R 语言简介",
    "section": "1.10 R 工作流程",
    "text": "1.10 R 工作流程\n显然，我们做统计分析时，最常接触的就是一维和二维的数据。但是在 R 里面，一维和二维的数据仍然有很多类型，我们应该从何学起呢？\n\n\n我认为，只要先把 tibble 摸透，就可以完成大多数数据分析了。\n\n\n\n\n\n当然，输入和输出的数据，通常都不是 tibble。但是，只需要三个步骤，我们就可以把任意格式的输入数据转换成任意格式的输出内容了。\n\n将其他格式数据导入为 tibble\n处理 tibble\n将 tibble 数据导出为其他格式\n\n这里，输入的数据格式可以是\n\n.RData 和 .rds 等 R 格式的数据\nR 和 R 包自带数据\n通过 R 代码手动输入的数据\nExcel 数据\nStata, SPSS, SAS 等统计软件数据\n.csv, .tsv, .txt 等纯文本数据\n.zip, .gz, .bz2, .xz 等压缩数据\n.bin, .dat, .ftr, .parquet 等二进制数据\nXML, HTML, JSON 等标记数据\n.shp, .geotiff 等地理信息数据\n文件夹、压缩包\n图片\n远程数据库和大数据\n在线数据、网站源码等\n还有很多…\n\n类似地，R 不仅可以导出成上面大部分格式的数据，而且可以直接输出统计报告，包括\n\n在终端输出的文本和表格（复制或截图）\nExcel, Markdown, LaTeX 等格式的表格\n各种格式的图片\nWord 和 PDF 文档\nhtml 网页\n可交互的图表\n（配合 Quarto）幻灯片\n（配合 Quarto）文章、书籍等\n（配合 Quarto）网站\n还有很多…\n\n可见，学会了 tibble 这个桥梁，我们能够完成多少任务！"
  },
  {
    "objectID": "intro.html#sec-chengyu",
    "href": "intro.html#sec-chengyu",
    "title": "1  R 语言简介",
    "section": "1.11 成语接龙",
    "text": "1.11 成语接龙\n\n\n\n\n\n\n图 1.1: 普通的成语接龙\n\n\n\n\n\n\n\n图 1.2: “为所欲为”的成语接龙\n\n\n\n\n\n用成语接龙打个比方，大部分成语输入的字和输出的字都不一样。但是，“为所欲为”却是一个例外，输入的是“为”，输出的也是“为”。学会“为所欲为”的小朋友，哪怕成语储备量只有这一个，也能自己接龙100次。（详见 章节 5.5 ）\n我们工作坊要学的，95%的函数都会围绕 tibble 和 gg；这是我的刻意设计，也是大势所趋。\n我对R的初学者有三个建议：\n\n只学 tibble，不必分心学向量（vector）、列表（list）、矩阵、data.table 等对象\n什么都不用背，想用什么查一下，用多了自然就记住了\n忘记没用的东西\n\n其实我自己现在也是这样。data.table 怎么用，早就忘得差不多了；想要处理一个复杂的 list，有的 purrr 函数，也得临时去查。不过一旦入门了，这种简单的函数，一两分钟就会用了。"
  },
  {
    "objectID": "intro.html#导入导出数据",
    "href": "intro.html#导入导出数据",
    "title": "1  R 语言简介",
    "section": "1.12 导入导出数据",
    "text": "1.12 导入导出数据\n\nWeek1-1. import_and_export_dta.R 简要地演示了清理数据的全流程\nWeek1-2. import_and_plot_dta.R 简要地演示了数据可视化的全流程\nWeek1-3. import_any_data.R 展示了如何导入各种类型的数据\nWeek1-4. generate_and_export_any_data.R 展示了如何生成、导出各种类型的数据"
  },
  {
    "objectID": "tibble.html#整洁数据",
    "href": "tibble.html#整洁数据",
    "title": "2  tibble 数据",
    "section": "2.1 整洁数据",
    "text": "2.1 整洁数据\n在浩如烟海的数据类型中，有一种数据类型特别为统计学家所关注。这一类数据有如下特点：\n\n每行是一个个案（case）、个体（individual）、观测点（observation）、分析单位（unit of analysis）\n\n统计上讲，这些概念等价\n\n每列是一个变量（variable）、特征（feature）\n每格是一个取值（value），即某个个案的某条特征\n\n这一类数据，有一种说法是整洁数据（tidy data），和其他五花八门的杂乱数据（messy data）相对。\n整洁数据的结构非常清晰，通过行和列，可以锁定每个格子数值的含义。\n下面是一些整洁数据的示例：\n\n\n\n一、starwars 星球大战角色数据（87行，14列）\n\n\n\n\n\n\n\n\n\n\n\n\nname\nheight\nmass\nhair_color\nskin_color\neye_color\nbirth_year\nsex\n\n\n\n\nLuke Skywalker\n172\n77\nblond\nfair\nblue\n19.0\nmale\n\n\nC-3PO\n167\n75\nNA\ngold\nyellow\n112.0\nnone\n\n\nR2-D2\n96\n32\nNA\nwhite, blue\nred\n33.0\nnone\n\n\nDarth Vader\n202\n136\nnone\nwhite\nyellow\n41.9\nmale\n\n\nLeia Organa\n150\n49\nbrown\nlight\nbrown\n19.0\nfemale\n\n\nOwen Lars\n178\n120\nbrown, grey\nlight\nblue\n52.0\nmale\n\n\n\n\n\n\n二、billboard 歌曲榜单数据（79行，317列）\n\n\n\n\n\n\n\n\n\n\n\n\nartist\ntrack\ndate.entered\nwk1\nwk2\nwk3\nwk4\nwk5\n\n\n\n\n2 Pac\nBaby Don’t Cry (Keep…\n2000-02-26\n87\n82\n72\n77\n87\n\n\n2Ge+her\nThe Hardest Part Of …\n2000-09-02\n91\n87\n92\nNA\nNA\n\n\n3 Doors Down\nKryptonite\n2000-04-08\n81\n70\n68\n67\n66\n\n\n3 Doors Down\nLoser\n2000-10-21\n76\n76\n72\n69\n67\n\n\n504 Boyz\nWobble Wobble\n2000-04-15\n57\n34\n25\n17\n17\n\n\n98^0\nGive Me Just One Nig…\n2000-08-19\n51\n39\n34\n26\n26\n\n\n\n\n\n\n三、diamonds 钻石数据（53940行，10列）\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ncarat\ncut\ncolor\nclarity\ndepth\ntable\nprice\nx\ny\nz\n\n\n\n\n0.23\nIdeal\nE\nSI2\n61.5\n55\n326\n3.95\n3.98\n2.43\n\n\n0.21\nPremium\nE\nSI1\n59.8\n61\n326\n3.89\n3.84\n2.31\n\n\n0.23\nGood\nE\nVS1\n56.9\n65\n327\n4.05\n4.07\n2.31\n\n\n0.29\nPremium\nI\nVS2\n62.4\n58\n334\n4.20\n4.23\n2.63\n\n\n0.31\nGood\nJ\nSI2\n63.3\n58\n335\n4.34\n4.35\n2.75\n\n\n0.24\nVery Good\nJ\nVVS2\n62.8\n57\n336\n3.94\n3.96\n2.48"
  },
  {
    "objectID": "tibble.html#tidyverse",
    "href": "tibble.html#tidyverse",
    "title": "2  tibble 数据",
    "section": "2.2 tidyverse",
    "text": "2.2 tidyverse\n本文是对 tidyverse 的入门介绍。\ntidyverse （直译为``整洁宇宙’’）整合了一系列主要处理、分析整洁数据的R包（R packages）。每个包里面都有大量的函数。其特点是函数的命名、语法、用法非常整洁统一。\n\n# 加载 tidyverse 包\nlibrary(tidyverse)\n\nWarning: package 'ggplot2' was built under R version 4.3.3\n\n\nWarning: package 'stringr' was built under R version 4.3.2\n\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.2     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.2     ✔ tidyr     1.3.0\n✔ purrr     1.0.1     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ tidyr::extract()   masks magrittr::extract()\n✖ dplyr::filter()    masks stats::filter()\n✖ dplyr::lag()       masks stats::lag()\n✖ purrr::set_names() masks magrittr::set_names()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\n\n\n\n\n\n\n\n提示\n\n\n\n在载入 tidyverse 时，可能会出现类似上面的一些警告语，它们不会影响 tidyverse 的正常使用，请无须担心。\n\n\ntidyverse 为整洁数据设计了一种数据格式，叫作 tibble。这个词是 tidy 和 table 的结合，顾名思义，特指整洁数据。它相当于Excel里的表格（整洁的才行）、Stata 里的数据、Python 里的 Pandas 数据框等。\n在数据科学中，整洁数据是最主流的数据形式。尽管我们日常生活中，可以看到形形色色的数据呈现形式（比如12306列车时间表、网购的商品列表等），但是它们的底层数据都是很整洁的。"
  },
  {
    "objectID": "tibble.html#打印-tibble",
    "href": "tibble.html#打印-tibble",
    "title": "2  tibble 数据",
    "section": "2.3 打印 tibble",
    "text": "2.3 打印 tibble\n在接下来的几章，我将以 diamonds 钻石数据为示例数据。\n\ndiamonds # 打印数据\n\n# A tibble: 53,940 × 10\n   carat cut       color clarity depth table price     x     y     z\n   &lt;dbl&gt; &lt;ord&gt;     &lt;ord&gt; &lt;ord&gt;   &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n 1  0.23 Ideal     E     SI2      61.5    55   326  3.95  3.98  2.43\n 2  0.21 Premium   E     SI1      59.8    61   326  3.89  3.84  2.31\n 3  0.23 Good      E     VS1      56.9    65   327  4.05  4.07  2.31\n 4  0.29 Premium   I     VS2      62.4    58   334  4.2   4.23  2.63\n 5  0.31 Good      J     SI2      63.3    58   335  4.34  4.35  2.75\n 6  0.24 Very Good J     VVS2     62.8    57   336  3.94  3.96  2.48\n 7  0.24 Very Good I     VVS1     62.3    57   336  3.95  3.98  2.47\n 8  0.26 Very Good H     SI1      61.9    55   337  4.07  4.11  2.53\n 9  0.22 Fair      E     VS2      65.1    61   337  3.87  3.78  2.49\n10  0.23 Very Good H     VS1      59.4    61   338  4     4.05  2.39\n# ℹ 53,930 more rows\n\n\n在R的界面中，tibble 数据的输出格式会像上面这样。从上到下，\n\n# A tibble: 10 × 10 表示当前 tibble 共有10行、10列\ncarat cut ... 这一行是变量名\n&lt;dbl&gt; &lt;ord&gt; ... 这一行是变量类型，比如\n\n数值型（&lt;dbl&gt;）\n整数型（&lt;int&gt;）\n有序类别型（&lt;ord&gt;）\n\n1  1.5  Very Good 从这一行开始，都是钻石的具体数据了\n\n1为行号，其他均为这颗钻石的参数\n\n\n如果你的 tibble 比较大，有很多行、很多列，tibble 在打印时会自动帮你隐藏多余的行和列，比方说\n\nstarwars\n\n# A tibble: 87 × 14\n   name     height  mass hair_color skin_color eye_color birth_year sex   gender\n   &lt;chr&gt;     &lt;int&gt; &lt;dbl&gt; &lt;chr&gt;      &lt;chr&gt;      &lt;chr&gt;          &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; \n 1 Luke Sk…    172    77 blond      fair       blue            19   male  mascu…\n 2 C-3PO       167    75 &lt;NA&gt;       gold       yellow         112   none  mascu…\n 3 R2-D2        96    32 &lt;NA&gt;       white, bl… red             33   none  mascu…\n 4 Darth V…    202   136 none       white      yellow          41.9 male  mascu…\n 5 Leia Or…    150    49 brown      light      brown           19   fema… femin…\n 6 Owen La…    178   120 brown, gr… light      blue            52   male  mascu…\n 7 Beru Wh…    165    75 brown      light      blue            47   fema… femin…\n 8 R5-D4        97    32 &lt;NA&gt;       white, red red             NA   none  mascu…\n 9 Biggs D…    183    84 black      light      brown           24   male  mascu…\n10 Obi-Wan…    182    77 auburn, w… fair       blue-gray       57   male  mascu…\n# ℹ 77 more rows\n# ℹ 5 more variables: homeworld &lt;chr&gt;, species &lt;chr&gt;, films &lt;list&gt;,\n#   vehicles &lt;list&gt;, starships &lt;list&gt;\n\n\n在这里，\n\n# ℹ 77 more rows 表示省略了77行\n# ℹ 5 more variables: homeworld &lt;chr&gt;, ... 表示省略了5个变量，并列出了省略的变量名、变量类型\n\n请注意，这里打印时省略的变量和个案，不影响数据本身的完整。"
  },
  {
    "objectID": "tibble.html#列的性质",
    "href": "tibble.html#列的性质",
    "title": "2  tibble 数据",
    "section": "2.4 列的性质",
    "text": "2.4 列的性质\n从上面可以看到，同样省略了一些行和列，tibble 打印了变量名、变量类型等信息，却丝毫不介绍省略的其他个案。这是为什么呢？\n在整洁数据中，相对于行，列（变量）有一些特殊的性质：\n\n每一列都有名称（变量名）\n\n姓名是 name\n身高是 height\n\n每一列只能储存同种类型的数值，不能“混搭”，比方说\n\n姓名是文本型（chr）\n身高是整数型（int）\n\n每一列都可以统计\n\nA开头姓名的比例（约5.7%）\n身高高于170吗？\n\n\n\n\n代码\n# 仅供参考，不需要掌握\nstarwars %&gt;%\n  summarise(\n    percentage = sprintf(\n      \"%.1f%%\",\n      mean(str_detect(name, \"^A\")) * 100\n    )\n  )\n\n\n# A tibble: 1 × 1\n  percentage\n  &lt;chr&gt;     \n1 5.7%      \n\n\n这里统计了A开头姓名的比例约为5.7%。\n\n\n代码\n# 仅供参考，不需要掌握\nstarwars %&gt;%\n  transmute(\n    height,\n    `height &gt; 170` = height &gt; 170\n  )\n\n\n# A tibble: 87 × 2\n   height `height &gt; 170`\n    &lt;int&gt; &lt;lgl&gt;         \n 1    172 TRUE          \n 2    167 FALSE         \n 3     96 FALSE         \n 4    202 TRUE          \n 5    150 FALSE         \n 6    178 TRUE          \n 7    165 FALSE         \n 8     97 FALSE         \n 9    183 TRUE          \n10    182 TRUE          \n# ℹ 77 more rows\n\n\n这里判断了各个角色的身高有没有高于170，判断结果为TRUE或FALSE。\n整理成表格如下：\n\n\n\n\n\n\n\n列（变量）\n行（个案）\n\n\n\n\n必须起名（具名性）\n不需要\n\n\n一定同类（同质性）\n不一定\n\n\n可以统计（算术性）\n不可以"
  },
  {
    "objectID": "tibble.html#列的类型",
    "href": "tibble.html#列的类型",
    "title": "2  tibble 数据",
    "section": "2.5 列的类型",
    "text": "2.5 列的类型\n列，或者``变量’’，在 R 里面用向量（矢量，vector）来存储。下面介绍一些常见的变量类型：\n\n数值型（numeric），包括实数型（double, real）和整数型（integer）\n逻辑型（logical），包括 TRUE 和 FALSE\n字符型（character），包括各种长度的文本\n类别型（factor）、标签型（haven label），通常是数值型变量加上标签\n日期型（date）、日期时间型（datetime），本质是数值型\n几何型（geometry），来自 sf 包，包括点、线、面等，用于空间分析和画图\n其他一维对象\n二维乃至多维对象，比如一列 tibbles，每个单元格存储一个 tibble"
  },
  {
    "objectID": "dplyr-skim.html#print",
    "href": "dplyr-skim.html#print",
    "title": "3  dplyr 浏览",
    "section": "3.1 print()",
    "text": "3.1 print()\n当你键入一个对象，而不对它进行任何操作时，R 会自动帮你套上一个 print() 函数。请看下面的例子：\n\n1 + 1\n\n[1] 2\n\nprint(1 + 1)\n\n[1] 2\n\n\n同理，我们阅读 diamonds 的时候，其实是看它打印出来的样子：\n\nlibrary(tidyverse)\n\ndiamonds\n\n# A tibble: 53,940 × 10\n   carat cut       color clarity depth table price     x     y     z\n   &lt;dbl&gt; &lt;ord&gt;     &lt;ord&gt; &lt;ord&gt;   &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n 1  0.23 Ideal     E     SI2      61.5    55   326  3.95  3.98  2.43\n 2  0.21 Premium   E     SI1      59.8    61   326  3.89  3.84  2.31\n 3  0.23 Good      E     VS1      56.9    65   327  4.05  4.07  2.31\n 4  0.29 Premium   I     VS2      62.4    58   334  4.2   4.23  2.63\n 5  0.31 Good      J     SI2      63.3    58   335  4.34  4.35  2.75\n 6  0.24 Very Good J     VVS2     62.8    57   336  3.94  3.96  2.48\n 7  0.24 Very Good I     VVS1     62.3    57   336  3.95  3.98  2.47\n 8  0.26 Very Good H     SI1      61.9    55   337  4.07  4.11  2.53\n 9  0.22 Fair      E     VS2      65.1    61   337  3.87  3.78  2.49\n10  0.23 Very Good H     VS1      59.4    61   338  4     4.05  2.39\n# ℹ 53,930 more rows\n\nprint(diamonds) # equivalent\n\n# A tibble: 53,940 × 10\n   carat cut       color clarity depth table price     x     y     z\n   &lt;dbl&gt; &lt;ord&gt;     &lt;ord&gt; &lt;ord&gt;   &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n 1  0.23 Ideal     E     SI2      61.5    55   326  3.95  3.98  2.43\n 2  0.21 Premium   E     SI1      59.8    61   326  3.89  3.84  2.31\n 3  0.23 Good      E     VS1      56.9    65   327  4.05  4.07  2.31\n 4  0.29 Premium   I     VS2      62.4    58   334  4.2   4.23  2.63\n 5  0.31 Good      J     SI2      63.3    58   335  4.34  4.35  2.75\n 6  0.24 Very Good J     VVS2     62.8    57   336  3.94  3.96  2.48\n 7  0.24 Very Good I     VVS1     62.3    57   336  3.95  3.98  2.47\n 8  0.26 Very Good H     SI1      61.9    55   337  4.07  4.11  2.53\n 9  0.22 Fair      E     VS2      65.1    61   337  3.87  3.78  2.49\n10  0.23 Very Good H     VS1      59.4    61   338  4     4.05  2.39\n# ℹ 53,930 more rows\n\n\n所以，我们通常不会主动使用 print()。\n我们还可以用 statart 包的 print_headtail() 和 print_interval() 函数。前者可以打印一个数据的开头几行和结尾几行，后者可以等间距地抽几行（有点像系统抽样）打印：\n\nlibrary(statart)\n\nprint_headtail(diamonds)\n\n# A tibble: 53,940 × 10\n      carat cut       color clarity depth table price     x     y     z\n      &lt;dbl&gt; &lt;ord&gt;     &lt;ord&gt; &lt;ord&gt;   &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n    1  0.23 Ideal     E     SI2      61.5    55   326  3.95  3.98  2.43\n    2  0.21 Premium   E     SI1      59.8    61   326  3.89  3.84  2.31\n    3  0.23 Good      E     VS1      56.9    65   327  4.05  4.07  2.31\n    4  0.29 Premium   I     VS2      62.4    58   334  4.2   4.23  2.63\n    5  0.31 Good      J     SI2      63.3    58   335  4.34  4.35  2.75\n53936  0.72 Ideal     D     SI1      60.8    57  2757  5.75  5.76  3.5 \n53937  0.72 Good      D     SI1      63.1    55  2757  5.69  5.75  3.61\n53938  0.7  Very Good D     SI1      62.8    60  2757  5.66  5.68  3.56\n53939  0.86 Premium   H     SI2      61      58  2757  6.15  6.12  3.74\n53940  0.75 Ideal     D     SI2      62.2    55  2757  5.83  5.87  3.64\n# ℹ 53,930 more rows in the middle\n# ℹ Use `print_headtail(n = ...)` to see more rows\n\nprint_headtail(diamonds, n = 20)\n\n# A tibble: 53,940 × 10\n      carat cut       color clarity depth table price     x     y     z\n      &lt;dbl&gt; &lt;ord&gt;     &lt;ord&gt; &lt;ord&gt;   &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n    1  0.23 Ideal     E     SI2      61.5    55   326  3.95  3.98  2.43\n    2  0.21 Premium   E     SI1      59.8    61   326  3.89  3.84  2.31\n    3  0.23 Good      E     VS1      56.9    65   327  4.05  4.07  2.31\n    4  0.29 Premium   I     VS2      62.4    58   334  4.2   4.23  2.63\n    5  0.31 Good      J     SI2      63.3    58   335  4.34  4.35  2.75\n    6  0.24 Very Good J     VVS2     62.8    57   336  3.94  3.96  2.48\n    7  0.24 Very Good I     VVS1     62.3    57   336  3.95  3.98  2.47\n    8  0.26 Very Good H     SI1      61.9    55   337  4.07  4.11  2.53\n    9  0.22 Fair      E     VS2      65.1    61   337  3.87  3.78  2.49\n   10  0.23 Very Good H     VS1      59.4    61   338  4     4.05  2.39\n53931  0.71 Premium   E     SI1      60.5    55  2756  5.79  5.74  3.49\n53932  0.71 Premium   F     SI1      59.8    62  2756  5.74  5.73  3.43\n53933  0.7  Very Good E     VS2      60.5    59  2757  5.71  5.76  3.47\n53934  0.7  Very Good E     VS2      61.2    59  2757  5.69  5.72  3.49\n53935  0.72 Premium   D     SI1      62.7    59  2757  5.69  5.73  3.58\n53936  0.72 Ideal     D     SI1      60.8    57  2757  5.75  5.76  3.5 \n53937  0.72 Good      D     SI1      63.1    55  2757  5.69  5.75  3.61\n53938  0.7  Very Good D     SI1      62.8    60  2757  5.66  5.68  3.56\n53939  0.86 Premium   H     SI2      61      58  2757  6.15  6.12  3.74\n53940  0.75 Ideal     D     SI2      62.2    55  2757  5.83  5.87  3.64\n# ℹ 53,920 more rows in the middle\n# ℹ Use `print_headtail(n = ...)` to see more rows\n\nprint_interval(diamonds)\n\n# A tibble: 53,940 × 10\n      carat cut       color clarity depth table price     x     y     z\n      &lt;dbl&gt; &lt;ord&gt;     &lt;ord&gt; &lt;ord&gt;   &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n    1  0.23 Ideal     E     SI2      61.5    55   326  3.95  3.98  2.43\n 5994  0.71 Ideal     G     VVS1     61.1    57  3955  5.76  5.8   3.53\n11987  1.09 Ideal     F     SI2      61.6    55  5143  6.59  6.65  4.08\n17981  1.7  Ideal     H     SI2      62.1    57  7273  7.68  7.63  4.75\n23974  1.53 Ideal     F     SI1      61.6    56 12109  7.39  7.34  4.54\n29967  0.31 Good      H     SI1      63.6    57   446  4.32  4.33  2.75\n35960  0.33 Very Good H     SI1      63      57   475  4.39  4.41  2.77\n41954  0.23 Very Good E     VVS2     61.6    61   505  3.92  3.97  2.43\n47947  0.71 Very Good J     SI1      63.5    58  1917  5.63  5.67  3.59\n53940  0.75 Ideal     D     SI2      62.2    55  2757  5.83  5.87  3.64\n# ℹ 53,930 more rows between the intervals\n# ℹ Use `print_interval(n = ...)` to see more rows\n\nprint_interval(diamonds, n = 20)\n\n# A tibble: 53,940 × 10\n      carat cut       color clarity depth table price     x     y     z\n      &lt;dbl&gt; &lt;ord&gt;     &lt;ord&gt; &lt;ord&gt;   &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n    1  0.23 Ideal     E     SI2      61.5  55     326  3.95  3.98  2.43\n 2840  0.9  Good      G     SI2      58.4  55    3269  6.34  6.39  3.72\n 5679  1.01 Very Good I     SI2      61.8  60    3885  6.34  6.37  3.93\n 8518  1.04 Ideal     F     SI1      62.1  56    4426  6.54  6.47  4.04\n11357  0.99 Very Good D     SI2      62.5  57    4993  6.3   6.34  3.95\n14195  1.06 Ideal     F     SI1      62.1  57    5758  6.53  6.51  4.05\n17034  1    Ideal     F     VS2      62.6  57    6804  6.4   6.35  3.99\n19873  1.52 Premium   J     VS1      62.2  59    8426  7.32  7.38  4.57\n22712  1.53 Premium   I     VS1      62.4  59   10729  7.3   7.34  4.57\n25551  1.6  Very Good G     VS2      61    57   14383  7.55  7.59  4.62\n28390  0.33 Ideal     H     VS2      60.7  57     668  4.48  4.45  2.71\n31229  0.32 Good      D     SI1      63.6  56     756  4.37  4.34  2.77\n34068  0.3  Premium   D     VS2      62    62     851  4.27  4.24  2.64\n36907  0.42 Ideal     G     VVS2     62.3  53     961  4.83  4.86  3.02\n39746  0.53 Ideal     G     SI2      62.4  56    1093  5.18  5.14  3.22\n42584  0.52 Ideal     E     SI1      61.4  57    1330  5.15  5.18  3.17\n45423  0.55 Ideal     E     SI1      61.4  55    1668  5.29  5.26  3.24\n48262  0.53 Ideal     G     VVS2     60.8  57    1955  5.24  5.28  3.2 \n51101  0.56 Very Good G     VVS2     62.1  55.6  2336  5.29  5.31  3.29\n53940  0.75 Ideal     D     SI2      62.2  55    2757  5.83  5.87  3.64\n# ℹ 53,920 more rows between the intervals\n# ℹ Use `print_interval(n = ...)` to see more rows"
  },
  {
    "objectID": "dplyr-skim.html#names",
    "href": "dplyr-skim.html#names",
    "title": "3  dplyr 浏览",
    "section": "3.2 names()",
    "text": "3.2 names()\n\nlibrary(tidyverse)\n\n# 罗列变量名\nnames(diamonds)\n\n [1] \"carat\"   \"cut\"     \"color\"   \"clarity\" \"depth\"   \"table\"   \"price\"  \n [8] \"x\"       \"y\"       \"z\""
  },
  {
    "objectID": "dplyr-skim.html#glimpse",
    "href": "dplyr-skim.html#glimpse",
    "title": "3  dplyr 浏览",
    "section": "3.4 glimpse()",
    "text": "3.4 glimpse()\n\n# 浏览变量列表，以及开头的若干个案\nglimpse(diamonds)\n\nRows: 53,940\nColumns: 10\n$ carat   &lt;dbl&gt; 0.23, 0.21, 0.23, 0.29, 0.31, 0.24, 0.24, 0.26, 0.22, 0.23, 0.…\n$ cut     &lt;ord&gt; Ideal, Premium, Good, Premium, Good, Very Good, Very Good, Ver…\n$ color   &lt;ord&gt; E, E, E, I, J, J, I, H, E, H, J, J, F, J, E, E, I, J, J, J, I,…\n$ clarity &lt;ord&gt; SI2, SI1, VS1, VS2, SI2, VVS2, VVS1, SI1, VS2, VS1, SI1, VS1, …\n$ depth   &lt;dbl&gt; 61.5, 59.8, 56.9, 62.4, 63.3, 62.8, 62.3, 61.9, 65.1, 59.4, 64…\n$ table   &lt;dbl&gt; 55, 61, 65, 58, 58, 57, 57, 55, 61, 61, 55, 56, 61, 54, 62, 58…\n$ price   &lt;int&gt; 326, 326, 327, 334, 335, 336, 336, 337, 337, 338, 339, 340, 34…\n$ x       &lt;dbl&gt; 3.95, 3.89, 4.05, 4.20, 4.34, 3.94, 3.95, 4.07, 3.87, 4.00, 4.…\n$ y       &lt;dbl&gt; 3.98, 3.84, 4.07, 4.23, 4.35, 3.96, 3.98, 4.11, 3.78, 4.05, 4.…\n$ z       &lt;dbl&gt; 2.43, 2.31, 2.31, 2.63, 2.75, 2.48, 2.47, 2.53, 2.49, 2.39, 2.…"
  },
  {
    "objectID": "dplyr-skim.html#view",
    "href": "dplyr-skim.html#view",
    "title": "3  dplyr 浏览",
    "section": "3.5 view()",
    "text": "3.5 view()\n\n# 打开 Excel 式的数据表\nview(diamonds)\n\n# browse() 功能更强大，可以选择特定变量\nbrowse(diamonds, 1:3)\n\n这里因为条件的限制无法演示，就在下面贴一些截图吧。大家可以在自己的 RStudio 里面运行代码，尝试一下。\n\n\n\n图 3.1: 打开 viewer 界面\n\n\n\n\n\n图 3.2: 搜索 “1000”\n\n\n\n\n\n图 3.3: 根据 price 降序"
  },
  {
    "objectID": "dplyr-skim.html#codebook",
    "href": "dplyr-skim.html#codebook",
    "title": "3  dplyr 浏览",
    "section": "3.6 codebook()",
    "text": "3.6 codebook()\n\nlibrary(statart)\n\n# 查看变量基本信息\ncodebook(diamonds)\n\n# A tibble: 10 × 4\n   variable type        n unique\n   &lt;chr&gt;    &lt;chr&gt;   &lt;int&gt;  &lt;int&gt;\n 1 carat    double  53940    273\n 2 cut      ordered 53940      5\n 3 color    ordered 53940      7\n 4 clarity  ordered 53940      8\n 5 depth    double  53940    184\n 6 table    double  53940    127\n 7 price    integer 53940  11602\n 8 x        double  53940    554\n 9 y        double  53940    552\n10 z        double  53940    375\n\n# 查看变量详细信息\ncodebook_detail(diamonds)\n\n\nidnametypemissingsvaluesnproprow_idcharactercharactercharactercharactercharactercharactercharacterinteger1caratnumeric0 (0.0%)[0.2, 5.01]53940112cutordinal0 (0.0%)Fair16103.0%2Good49069.1%2Very Good1208222.4%2Premium1379125.6%2Ideal2155140.0%223colorordinal0 (0.0%)D677512.6%3E979718.2%3F954217.7%3G1129220.9%3H830415.4%3I542210.1%3J28085.2%334clarityordinal0 (0.0%)I17411.4%4SI2919417.0%4SI11306524.2%4VS21225822.7%4VS1817115.1%4VVS250669.4%4VVS136556.8%4IF17903.3%445depthnumeric0 (0.0%)[43, 79]53940556tablenumeric0 (0.0%)[43, 95]53940667priceinteger0 (0.0%)[326, 18823]53940778xnumeric0 (0.0%)[0, 10.74]53940889ynumeric0 (0.0%)[0, 58.9]539409910znumeric0 (0.0%)[0, 31.8]539401010n: 37"
  },
  {
    "objectID": "dplyr-sort.html#relocate",
    "href": "dplyr-sort.html#relocate",
    "title": "4  dplyr 排序",
    "section": "4.1 relocate()",
    "text": "4.1 relocate()\n让我们回到前面摘出来的示例数据。\n\nlibrary(tidyverse)\n\ndiamonds # 示例数据\n\n# A tibble: 53,940 × 10\n   carat cut       color clarity depth table price     x     y     z\n   &lt;dbl&gt; &lt;ord&gt;     &lt;ord&gt; &lt;ord&gt;   &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n 1  0.23 Ideal     E     SI2      61.5    55   326  3.95  3.98  2.43\n 2  0.21 Premium   E     SI1      59.8    61   326  3.89  3.84  2.31\n 3  0.23 Good      E     VS1      56.9    65   327  4.05  4.07  2.31\n 4  0.29 Premium   I     VS2      62.4    58   334  4.2   4.23  2.63\n 5  0.31 Good      J     SI2      63.3    58   335  4.34  4.35  2.75\n 6  0.24 Very Good J     VVS2     62.8    57   336  3.94  3.96  2.48\n 7  0.24 Very Good I     VVS1     62.3    57   336  3.95  3.98  2.47\n 8  0.26 Very Good H     SI1      61.9    55   337  4.07  4.11  2.53\n 9  0.22 Fair      E     VS2      65.1    61   337  3.87  3.78  2.49\n10  0.23 Very Good H     VS1      59.4    61   338  4     4.05  2.39\n# ℹ 53,930 more rows\n\n\n接下来，我将运行一些 relocate() 函数的示例，请特别关注列的顺序变化。\n\nrelocate(diamonds, price) # 把price变量提到最前，其余顺序不变\n\n# A tibble: 53,940 × 10\n   price carat cut       color clarity depth table     x     y     z\n   &lt;int&gt; &lt;dbl&gt; &lt;ord&gt;     &lt;ord&gt; &lt;ord&gt;   &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n 1   326  0.23 Ideal     E     SI2      61.5    55  3.95  3.98  2.43\n 2   326  0.21 Premium   E     SI1      59.8    61  3.89  3.84  2.31\n 3   327  0.23 Good      E     VS1      56.9    65  4.05  4.07  2.31\n 4   334  0.29 Premium   I     VS2      62.4    58  4.2   4.23  2.63\n 5   335  0.31 Good      J     SI2      63.3    58  4.34  4.35  2.75\n 6   336  0.24 Very Good J     VVS2     62.8    57  3.94  3.96  2.48\n 7   336  0.24 Very Good I     VVS1     62.3    57  3.95  3.98  2.47\n 8   337  0.26 Very Good H     SI1      61.9    55  4.07  4.11  2.53\n 9   337  0.22 Fair      E     VS2      65.1    61  3.87  3.78  2.49\n10   338  0.23 Very Good H     VS1      59.4    61  4     4.05  2.39\n# ℹ 53,930 more rows"
  },
  {
    "objectID": "dplyr-sort.html#before-和-.after",
    "href": "dplyr-sort.html#before-和-.after",
    "title": "4  dplyr 排序",
    "section": "4.2 .before 和 .after",
    "text": "4.2 .before 和 .after\n\nrelocate(diamonds, price, .before = cut) # 把price提到cut之前，其余顺序不变\n\n# A tibble: 53,940 × 10\n   carat price cut       color clarity depth table     x     y     z\n   &lt;dbl&gt; &lt;int&gt; &lt;ord&gt;     &lt;ord&gt; &lt;ord&gt;   &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n 1  0.23   326 Ideal     E     SI2      61.5    55  3.95  3.98  2.43\n 2  0.21   326 Premium   E     SI1      59.8    61  3.89  3.84  2.31\n 3  0.23   327 Good      E     VS1      56.9    65  4.05  4.07  2.31\n 4  0.29   334 Premium   I     VS2      62.4    58  4.2   4.23  2.63\n 5  0.31   335 Good      J     SI2      63.3    58  4.34  4.35  2.75\n 6  0.24   336 Very Good J     VVS2     62.8    57  3.94  3.96  2.48\n 7  0.24   336 Very Good I     VVS1     62.3    57  3.95  3.98  2.47\n 8  0.26   337 Very Good H     SI1      61.9    55  4.07  4.11  2.53\n 9  0.22   337 Fair      E     VS2      65.1    61  3.87  3.78  2.49\n10  0.23   338 Very Good H     VS1      59.4    61  4     4.05  2.39\n# ℹ 53,930 more rows\n\nrelocate(diamonds, price, .after = cut) # 把price提到cut之后，其余顺序不变\n\n# A tibble: 53,940 × 10\n   carat cut       price color clarity depth table     x     y     z\n   &lt;dbl&gt; &lt;ord&gt;     &lt;int&gt; &lt;ord&gt; &lt;ord&gt;   &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n 1  0.23 Ideal       326 E     SI2      61.5    55  3.95  3.98  2.43\n 2  0.21 Premium     326 E     SI1      59.8    61  3.89  3.84  2.31\n 3  0.23 Good        327 E     VS1      56.9    65  4.05  4.07  2.31\n 4  0.29 Premium     334 I     VS2      62.4    58  4.2   4.23  2.63\n 5  0.31 Good        335 J     SI2      63.3    58  4.34  4.35  2.75\n 6  0.24 Very Good   336 J     VVS2     62.8    57  3.94  3.96  2.48\n 7  0.24 Very Good   336 I     VVS1     62.3    57  3.95  3.98  2.47\n 8  0.26 Very Good   337 H     SI1      61.9    55  4.07  4.11  2.53\n 9  0.22 Fair        337 E     VS2      65.1    61  3.87  3.78  2.49\n10  0.23 Very Good   338 H     VS1      59.4    61  4     4.05  2.39\n# ℹ 53,930 more rows"
  },
  {
    "objectID": "dplyr-sort.html#arrange",
    "href": "dplyr-sort.html#arrange",
    "title": "4  dplyr 排序",
    "section": "4.3 arrange()",
    "text": "4.3 arrange()\n在整洁数据中，对个案排序需要借助变量。\n\n在小学里，根据学号（变量）排序，变的是小学生（个案）的顺序。\n在网购时，根据商品价格（变量）排序，变的是商品（个案）的顺序。\n在12306买票时，根据列车发车时间（变量）排序，变的是列车（个案）的顺序。\n\n\n\n\n\n\n\n重要\n\n\n\n变量的每个值都是一条个案，所以对单个变量排序的本质是改变个案顺序！\n\n\n这里我们借助了变量的统计能力（算术性）。反过来说，因为个案不具备统计能力，所以我们无法对变量做类似的排序，只能手动调整它们的位置。\n\narrange(diamonds, price) # 根据price变量升序（从低到高）\n\n# A tibble: 53,940 × 10\n   carat cut       color clarity depth table price     x     y     z\n   &lt;dbl&gt; &lt;ord&gt;     &lt;ord&gt; &lt;ord&gt;   &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n 1  0.23 Ideal     E     SI2      61.5    55   326  3.95  3.98  2.43\n 2  0.21 Premium   E     SI1      59.8    61   326  3.89  3.84  2.31\n 3  0.23 Good      E     VS1      56.9    65   327  4.05  4.07  2.31\n 4  0.29 Premium   I     VS2      62.4    58   334  4.2   4.23  2.63\n 5  0.31 Good      J     SI2      63.3    58   335  4.34  4.35  2.75\n 6  0.24 Very Good J     VVS2     62.8    57   336  3.94  3.96  2.48\n 7  0.24 Very Good I     VVS1     62.3    57   336  3.95  3.98  2.47\n 8  0.26 Very Good H     SI1      61.9    55   337  4.07  4.11  2.53\n 9  0.22 Fair      E     VS2      65.1    61   337  3.87  3.78  2.49\n10  0.23 Very Good H     VS1      59.4    61   338  4     4.05  2.39\n# ℹ 53,930 more rows\n\narrange(diamonds, -price) # 根据price变量降序（从高到低）\n\n# A tibble: 53,940 × 10\n   carat cut       color clarity depth table price     x     y     z\n   &lt;dbl&gt; &lt;ord&gt;     &lt;ord&gt; &lt;ord&gt;   &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n 1  2.29 Premium   I     VS2      60.8    60 18823  8.5   8.47  5.16\n 2  2    Very Good G     SI1      63.5    56 18818  7.9   7.97  5.04\n 3  1.51 Ideal     G     IF       61.7    55 18806  7.37  7.41  4.56\n 4  2.07 Ideal     G     SI2      62.5    55 18804  8.2   8.13  5.11\n 5  2    Very Good H     SI1      62.8    57 18803  7.95  8     5.01\n 6  2.29 Premium   I     SI1      61.8    59 18797  8.52  8.45  5.24\n 7  2.04 Premium   H     SI1      58.1    60 18795  8.37  8.28  4.84\n 8  2    Premium   I     VS1      60.8    59 18795  8.13  8.02  4.91\n 9  1.71 Premium   F     VS2      62.3    59 18791  7.57  7.53  4.7 \n10  2.15 Ideal     G     SI2      62.6    54 18791  8.29  8.35  5.21\n# ℹ 53,930 more rows"
  },
  {
    "objectID": "dplyr-pipe.html#定义",
    "href": "dplyr-pipe.html#定义",
    "title": "5  magrittr 管道",
    "section": "5.1 %>% 定义",
    "text": "5.1 %&gt;% 定义\n在继续讲解 dplyr 函数前，我想介绍一个非常特殊的函数，来自 magrittr 包的管道（pipe）函数 %&gt;%。 它的用途是连通函数，美化代码。\n它的定义如下\n\nf(a) 等于 a %&gt;% f()\nf(a, b) 等于 a %&gt;% f(b)\nf(a, b, c, ...) 等于 a %&gt;% f(b, c, ...)\n\n比方说，names(diamonds) 等于 diamonds %&gt;% names()。\n\n\n\n\n\n\n警告\n\n\n\n从下一章开始，为了帮助大家养成习惯，我会把几乎所有的函数都写成管道 %&gt;% 的形式。"
  },
  {
    "objectID": "dplyr-pipe.html#优点",
    "href": "dplyr-pipe.html#优点",
    "title": "5  magrittr 管道",
    "section": "5.2 %>% 优点",
    "text": "5.2 %&gt;% 优点\n为什么要多此一举呢？在数据分析中，我们通常要用到大量的函数，比如我们要对一头牛做复杂的处理：\n【错误】写法一\n\n吃(蘸(涮(挤(捶打(切(宰(牛))), 成丸), 牛骨清汤), 沙茶))\n\n【错误】写法二\n\n吃(\n  蘸(\n    涮(\n      挤(\n        捶打(\n          切(\n            宰(牛)\n          )\n        ), 成丸\n      ), 牛骨清汤\n    ), 沙茶\n  )\n)\n\n【正确】写法三（使用管道）\n\n牛 %&gt;%\n  宰() %&gt;%\n  切() %&gt;%\n  捶打() %&gt;%\n  挤(成丸) %&gt;%\n  涮(牛骨清汤) %&gt;%\n  蘸(沙茶) %&gt;%\n  吃()\n\n第三种写法，明显更自然，更清晰。原来这一系列函数，把牛变成了手打牛肉丸，下清汤锅，蘸沙茶酱，填了肚子——想必是在潮汕地区吃的。\n\n\n\n\n\n\n提示\n\n\n\n当我们有连续多个函数连在一起的时候，%&gt;% 能让代码更加整洁、易读。"
  },
  {
    "objectID": "dplyr-pipe.html#范例",
    "href": "dplyr-pipe.html#范例",
    "title": "5  magrittr 管道",
    "section": "5.3 %>% 范例",
    "text": "5.3 %&gt;% 范例\n任务：先把 price 放到开头，再对它降序排列（从高到低）\n\n# 【错误】写法一\narrange(relocate(diamonds, price), -price)\n\n# 【错误】写法二\narrange(\n  relocate(diamonds, price),\n  -price\n)\n\n\n# 【正确】写法三，整洁、清晰、易读\ndiamonds %&gt;%\n  relocate(price) %&gt;%\n  arrange(-price)\n\n# A tibble: 53,940 × 10\n   price carat cut       color clarity depth table     x     y     z\n   &lt;int&gt; &lt;dbl&gt; &lt;ord&gt;     &lt;ord&gt; &lt;ord&gt;   &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n 1 18823  2.29 Premium   I     VS2      60.8    60  8.5   8.47  5.16\n 2 18818  2    Very Good G     SI1      63.5    56  7.9   7.97  5.04\n 3 18806  1.51 Ideal     G     IF       61.7    55  7.37  7.41  4.56\n 4 18804  2.07 Ideal     G     SI2      62.5    55  8.2   8.13  5.11\n 5 18803  2    Very Good H     SI1      62.8    57  7.95  8     5.01\n 6 18797  2.29 Premium   I     SI1      61.8    59  8.52  8.45  5.24\n 7 18795  2.04 Premium   H     SI1      58.1    60  8.37  8.28  4.84\n 8 18795  2    Premium   I     VS1      60.8    59  8.13  8.02  4.91\n 9 18791  1.71 Premium   F     VS2      62.3    59  7.57  7.53  4.7 \n10 18791  2.15 Ideal     G     SI2      62.6    54  8.29  8.35  5.21\n# ℹ 53,930 more rows"
  },
  {
    "objectID": "dplyr-pipe.html#和",
    "href": "dplyr-pipe.html#和",
    "title": "5  magrittr 管道",
    "section": "5.4 %>% 和 |>",
    "text": "5.4 %&gt;% 和 |&gt;\n在 R 4.1 的版本及以后，R 推出了所谓的自然管道（natural pipe）|&gt;。它有三个优点，\n\n比较简洁，仅使用了两个字符；\n和 Julia 等编程语言统一了语法；\n随时可用，使用前不需要导入 tidyverse, dplyr 或 magnittr 包。\n\n鉴于上述优点，甚至 tidyverse 的奠基人 Hadley Wickham 都改用了 |&gt;，几乎抛弃了 %&gt;%。但是需要注意，|&gt;也有很多缺点，具体什么我就不赘述了，你们以后遇到了自然知道。\n就我个人习惯而言，我还是用 %&gt;% 更多一点。而且我也更推荐初学者用 %&gt;%，因为它更简单、更少报错。"
  },
  {
    "objectID": "dplyr-pipe.html#sec-wei",
    "href": "dplyr-pipe.html#sec-wei",
    "title": "5  magrittr 管道",
    "section": "5.5 为所欲为",
    "text": "5.5 为所欲为\n我们已经学了一些 dplyr 函数。可以发现，几乎所有 dplyr 函数输入和输出的格式都是 tibble，这是一个非常精妙的设计。\n\n\n\n\n\n\n图 5.1: 普通的成语接龙\n\n\n\n\n\n\n\n图 5.2: “为所欲为”的成语接龙\n\n\n\n\n\n章节 1.11 说到，想要学会成语接龙，学“为所欲为”是最省时省力的。同理，\n\n\n\n\n\n\n笔记\n\n\n\n\n使用 dplyr 函数，初学者可以“为所欲为”地处理 tibble。\ndplyr 函数非常适配管道函数 %&gt;%。\n\n\n\n下面是一个简单的证明：\n\n\n代码\n# 定义识别函数\nread_object &lt;- function(object) {\n  input &lt;- substitute(object) %&gt;%\n    as.character()\n  type &lt;- type_sum(object) %&gt;%\n    as.character() %&gt;%\n    str_extract(\"^\\\\w+\")\n\n  judgement &lt;- str_glue(\n    \"{input} 的类型是 {type}。\"\n  )\n  return(judgement)\n}\n\n\n\nread_object(diamonds) # 识别 diamonds\n\ndiamonds 的类型是 tibble。\n\n\n\ndiamonds2 &lt;- diamonds %&gt;%\n  relocate(price)\n\nread_object(diamonds2) # 识别 diamonds2\n\ndiamonds2 的类型是 tibble。\n\n\n\n\n\n\n\n\n提示\n\n\n\nrelocate() 输入 diamonds，输出 diamonds2，二者都是 tibble。\n\n\n\ndiamonds3 &lt;- diamonds2 %&gt;%\n  arrange(-price)\n\nread_object(diamonds3) # 识别 diamonds3\n\ndiamonds3 的类型是 tibble。\n\n\n\n\n\n\n\n\n提示\n\n\n\n同样，arrange() 输入 diamonds2，输出 diamonds3，二者都是 tibble。\n\n\n\n值得一提的是，tidyverse 底下的其他包，通常也有“为所欲为”的性质：\n\n\n\n\n\n\n\n对象\n函数\n例子\n\n\n\n\n成语接龙\n“为”\n特定成语\n“为所欲为”\n\n\n数据\ntibble\ndplyr 函数\narrange(), relocate() 等\n\n\n图形\ngg\nggplot 函数\ngeom_col(), ggtitle() 等\n\n\n文本变量\ncharacter\n部分 stringr 函数\nstr_replace(), str_extract() 等\n\n\n类别变量\nfactor\n部分 forcats 函数\nfct_reorder(), fct_recode() 等\n\n\n列表\nlist\n部分 purrr 函数\nmap(), map2() 等"
  },
  {
    "objectID": "dplyr-select.html#select",
    "href": "dplyr-select.html#select",
    "title": "7  dplyr 选取或删除",
    "section": "7.1 select()",
    "text": "7.1 select()\nselect() 可以根据位置选取列。\n\nlibrary(tidyverse)\ndiamonds %&gt;%\n  select(5) # 抽取第五列\n\n# A tibble: 53,940 × 1\n   depth\n   &lt;dbl&gt;\n 1  61.5\n 2  59.8\n 3  56.9\n 4  62.4\n 5  63.3\n 6  62.8\n 7  62.3\n 8  61.9\n 9  65.1\n10  59.4\n# ℹ 53,930 more rows\n\ndiamonds %&gt;%\n  select(-5) # 删除第五列\n\n# A tibble: 53,940 × 9\n   carat cut       color clarity table price     x     y     z\n   &lt;dbl&gt; &lt;ord&gt;     &lt;ord&gt; &lt;ord&gt;   &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n 1  0.23 Ideal     E     SI2        55   326  3.95  3.98  2.43\n 2  0.21 Premium   E     SI1        61   326  3.89  3.84  2.31\n 3  0.23 Good      E     VS1        65   327  4.05  4.07  2.31\n 4  0.29 Premium   I     VS2        58   334  4.2   4.23  2.63\n 5  0.31 Good      J     SI2        58   335  4.34  4.35  2.75\n 6  0.24 Very Good J     VVS2       57   336  3.94  3.96  2.48\n 7  0.24 Very Good I     VVS1       57   336  3.95  3.98  2.47\n 8  0.26 Very Good H     SI1        55   337  4.07  4.11  2.53\n 9  0.22 Fair      E     VS2        61   337  3.87  3.78  2.49\n10  0.23 Very Good H     VS1        61   338  4     4.05  2.39\n# ℹ 53,930 more rows\n\n\nselect() 也可以根据名称选取列。\n\ndiamonds %&gt;%\n  select(cut) # 选取cut变量\n\n# A tibble: 53,940 × 1\n   cut      \n   &lt;ord&gt;    \n 1 Ideal    \n 2 Premium  \n 3 Good     \n 4 Premium  \n 5 Good     \n 6 Very Good\n 7 Very Good\n 8 Very Good\n 9 Fair     \n10 Very Good\n# ℹ 53,930 more rows\n\ndiamonds %&gt;%\n  select(-cut) # 删除cut变量\n\n# A tibble: 53,940 × 9\n   carat color clarity depth table price     x     y     z\n   &lt;dbl&gt; &lt;ord&gt; &lt;ord&gt;   &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n 1  0.23 E     SI2      61.5    55   326  3.95  3.98  2.43\n 2  0.21 E     SI1      59.8    61   326  3.89  3.84  2.31\n 3  0.23 E     VS1      56.9    65   327  4.05  4.07  2.31\n 4  0.29 I     VS2      62.4    58   334  4.2   4.23  2.63\n 5  0.31 J     SI2      63.3    58   335  4.34  4.35  2.75\n 6  0.24 J     VVS2     62.8    57   336  3.94  3.96  2.48\n 7  0.24 I     VVS1     62.3    57   336  3.95  3.98  2.47\n 8  0.26 H     SI1      61.9    55   337  4.07  4.11  2.53\n 9  0.22 E     VS2      65.1    61   337  3.87  3.78  2.49\n10  0.23 H     VS1      59.4    61   338  4     4.05  2.39\n# ℹ 53,930 more rows"
  },
  {
    "objectID": "dplyr-select.html#和-c",
    "href": "dplyr-select.html#和-c",
    "title": "7  dplyr 选取或删除",
    "section": "7.2 : 和 c()",
    "text": "7.2 : 和 c()\n: 表示多个连续的整数，比如 1:3 表示 1~3 这三个整数。\n\n1:5\n\n[1] 1 2 3 4 5\n\n# 选取前五个变量\ndiamonds %&gt;%\n  select(1:5)\n\n# A tibble: 53,940 × 5\n   carat cut       color clarity depth\n   &lt;dbl&gt; &lt;ord&gt;     &lt;ord&gt; &lt;ord&gt;   &lt;dbl&gt;\n 1  0.23 Ideal     E     SI2      61.5\n 2  0.21 Premium   E     SI1      59.8\n 3  0.23 Good      E     VS1      56.9\n 4  0.29 Premium   I     VS2      62.4\n 5  0.31 Good      J     SI2      63.3\n 6  0.24 Very Good J     VVS2     62.8\n 7  0.24 Very Good I     VVS1     62.3\n 8  0.26 Very Good H     SI1      61.9\n 9  0.22 Fair      E     VS2      65.1\n10  0.23 Very Good H     VS1      59.4\n# ℹ 53,930 more rows\n\n# 用另一种方式选取前五个变量\ndiamonds %&gt;%\n  select(carat:depth)\n\n# A tibble: 53,940 × 5\n   carat cut       color clarity depth\n   &lt;dbl&gt; &lt;ord&gt;     &lt;ord&gt; &lt;ord&gt;   &lt;dbl&gt;\n 1  0.23 Ideal     E     SI2      61.5\n 2  0.21 Premium   E     SI1      59.8\n 3  0.23 Good      E     VS1      56.9\n 4  0.29 Premium   I     VS2      62.4\n 5  0.31 Good      J     SI2      63.3\n 6  0.24 Very Good J     VVS2     62.8\n 7  0.24 Very Good I     VVS1     62.3\n 8  0.26 Very Good H     SI1      61.9\n 9  0.22 Fair      E     VS2      65.1\n10  0.23 Very Good H     VS1      59.4\n# ℹ 53,930 more rows\n\n\nc() 表示多个数的集合，它比 : 更灵活、更普适，缺点是写起来麻烦些。c(1, 2, 3) 和 c(1:3) 显然都不如 1:3 简洁。但是，c() 既可以表示不连续的整数，也可以表示其他类型的数：\n\nc(1:3, 5) 表示 1, 2, 3, 5 这四个数\nc(1:3, 5:6) 表示 1, 2, 3, 5, 6 这五个数\nc(1.23, pi, exp(1), sqrt(2)) 表示 1.23, \\(\\pi\\), \\(e\\), \\(\\sqrt{2}\\) 这四个数\n\n不过，只有整数能用来选变量哦\n\n\n\nc(1, 3:5)\n\n[1] 1 3 4 5\n\n# 选取第1、3、4、5个变量\ndiamonds %&gt;%\n  select(c(1, 3:5))\n\n# A tibble: 53,940 × 4\n   carat color clarity depth\n   &lt;dbl&gt; &lt;ord&gt; &lt;ord&gt;   &lt;dbl&gt;\n 1  0.23 E     SI2      61.5\n 2  0.21 E     SI1      59.8\n 3  0.23 E     VS1      56.9\n 4  0.29 I     VS2      62.4\n 5  0.31 J     SI2      63.3\n 6  0.24 J     VVS2     62.8\n 7  0.24 I     VVS1     62.3\n 8  0.26 H     SI1      61.9\n 9  0.22 E     VS2      65.1\n10  0.23 H     VS1      59.4\n# ℹ 53,930 more rows\n\n# 用另一种方式选取这些变量\ndiamonds %&gt;%\n  select(c(carat, color:depth))\n\n# A tibble: 53,940 × 4\n   carat color clarity depth\n   &lt;dbl&gt; &lt;ord&gt; &lt;ord&gt;   &lt;dbl&gt;\n 1  0.23 E     SI2      61.5\n 2  0.21 E     SI1      59.8\n 3  0.23 E     VS1      56.9\n 4  0.29 I     VS2      62.4\n 5  0.31 J     SI2      63.3\n 6  0.24 J     VVS2     62.8\n 7  0.24 I     VVS1     62.3\n 8  0.26 H     SI1      61.9\n 9  0.22 E     VS2      65.1\n10  0.23 H     VS1      59.4\n# ℹ 53,930 more rows"
  },
  {
    "objectID": "dplyr-select.html#head-和-tail",
    "href": "dplyr-select.html#head-和-tail",
    "title": "7  dplyr 选取或删除",
    "section": "7.3 head() 和 tail()",
    "text": "7.3 head() 和 tail()\n\ndiamonds %&gt;%\n  head() # 抽取前六条\n\n# A tibble: 6 × 10\n  carat cut       color clarity depth table price     x     y     z\n  &lt;dbl&gt; &lt;ord&gt;     &lt;ord&gt; &lt;ord&gt;   &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n1  0.23 Ideal     E     SI2      61.5    55   326  3.95  3.98  2.43\n2  0.21 Premium   E     SI1      59.8    61   326  3.89  3.84  2.31\n3  0.23 Good      E     VS1      56.9    65   327  4.05  4.07  2.31\n4  0.29 Premium   I     VS2      62.4    58   334  4.2   4.23  2.63\n5  0.31 Good      J     SI2      63.3    58   335  4.34  4.35  2.75\n6  0.24 Very Good J     VVS2     62.8    57   336  3.94  3.96  2.48\n\ndiamonds %&gt;%\n  tail() # 抽取后六条\n\n# A tibble: 6 × 10\n  carat cut       color clarity depth table price     x     y     z\n  &lt;dbl&gt; &lt;ord&gt;     &lt;ord&gt; &lt;ord&gt;   &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n1  0.72 Premium   D     SI1      62.7    59  2757  5.69  5.73  3.58\n2  0.72 Ideal     D     SI1      60.8    57  2757  5.75  5.76  3.5 \n3  0.72 Good      D     SI1      63.1    55  2757  5.69  5.75  3.61\n4  0.7  Very Good D     SI1      62.8    60  2757  5.66  5.68  3.56\n5  0.86 Premium   H     SI2      61      58  2757  6.15  6.12  3.74\n6  0.75 Ideal     D     SI2      62.2    55  2757  5.83  5.87  3.64"
  },
  {
    "objectID": "dplyr-select.html#slice",
    "href": "dplyr-select.html#slice",
    "title": "7  dplyr 选取或删除",
    "section": "7.4 slice()",
    "text": "7.4 slice()\n比起 head() 和 tail()，slice() 的语法要更复杂、更灵活一点。和 select() 类似，slice() 可以选取任意位置的若干行，再重新拼接起来，因此要列明所有行号。\n\ndiamonds %&gt;%\n  slice(5) # 抽取第五条\n\n# A tibble: 1 × 10\n  carat cut   color clarity depth table price     x     y     z\n  &lt;dbl&gt; &lt;ord&gt; &lt;ord&gt; &lt;ord&gt;   &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n1  0.31 Good  J     SI2      63.3    58   335  4.34  4.35  2.75\n\ndiamonds %&gt;%\n  slice(1:5) # 抽取前五条\n\n# A tibble: 5 × 10\n  carat cut     color clarity depth table price     x     y     z\n  &lt;dbl&gt; &lt;ord&gt;   &lt;ord&gt; &lt;ord&gt;   &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n1  0.23 Ideal   E     SI2      61.5    55   326  3.95  3.98  2.43\n2  0.21 Premium E     SI1      59.8    61   326  3.89  3.84  2.31\n3  0.23 Good    E     VS1      56.9    65   327  4.05  4.07  2.31\n4  0.29 Premium I     VS2      62.4    58   334  4.2   4.23  2.63\n5  0.31 Good    J     SI2      63.3    58   335  4.34  4.35  2.75\n\ndiamonds %&gt;%\n  slice(-5) # 删除第五条\n\n# A tibble: 53,939 × 10\n   carat cut       color clarity depth table price     x     y     z\n   &lt;dbl&gt; &lt;ord&gt;     &lt;ord&gt; &lt;ord&gt;   &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n 1  0.23 Ideal     E     SI2      61.5    55   326  3.95  3.98  2.43\n 2  0.21 Premium   E     SI1      59.8    61   326  3.89  3.84  2.31\n 3  0.23 Good      E     VS1      56.9    65   327  4.05  4.07  2.31\n 4  0.29 Premium   I     VS2      62.4    58   334  4.2   4.23  2.63\n 5  0.24 Very Good J     VVS2     62.8    57   336  3.94  3.96  2.48\n 6  0.24 Very Good I     VVS1     62.3    57   336  3.95  3.98  2.47\n 7  0.26 Very Good H     SI1      61.9    55   337  4.07  4.11  2.53\n 8  0.22 Fair      E     VS2      65.1    61   337  3.87  3.78  2.49\n 9  0.23 Very Good H     VS1      59.4    61   338  4     4.05  2.39\n10  0.3  Good      J     SI1      64      55   339  4.25  4.28  2.73\n# ℹ 53,929 more rows"
  },
  {
    "objectID": "dplyr-select.html#filter",
    "href": "dplyr-select.html#filter",
    "title": "7  dplyr 选取或删除",
    "section": "7.5 filter()",
    "text": "7.5 filter()\n或许你还记得 arrange() 函数的讨论。我们说到变量具有统计能力，所以我们可以对单个变量排序，表现为改变个案顺序。同理，我们也可以对变量做判断，表现为筛选个案。\n比方说，我们可以判断钻石的价格有没有低于 1000，且只保留那些 1000 以内的钻石。\n\ndiamonds %&gt;%\n  filter(price &lt; 1000) # 仅筛选$1000以内的钻石\n\n# A tibble: 14,499 × 10\n   carat cut       color clarity depth table price     x     y     z\n   &lt;dbl&gt; &lt;ord&gt;     &lt;ord&gt; &lt;ord&gt;   &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n 1  0.23 Ideal     E     SI2      61.5    55   326  3.95  3.98  2.43\n 2  0.21 Premium   E     SI1      59.8    61   326  3.89  3.84  2.31\n 3  0.23 Good      E     VS1      56.9    65   327  4.05  4.07  2.31\n 4  0.29 Premium   I     VS2      62.4    58   334  4.2   4.23  2.63\n 5  0.31 Good      J     SI2      63.3    58   335  4.34  4.35  2.75\n 6  0.24 Very Good J     VVS2     62.8    57   336  3.94  3.96  2.48\n 7  0.24 Very Good I     VVS1     62.3    57   336  3.95  3.98  2.47\n 8  0.26 Very Good H     SI1      61.9    55   337  4.07  4.11  2.53\n 9  0.22 Fair      E     VS2      65.1    61   337  3.87  3.78  2.49\n10  0.23 Very Good H     VS1      59.4    61   338  4     4.05  2.39\n# ℹ 14,489 more rows\n\n\n我们也可以判断钻石的净度是不是等于 VVS2，且只保留判断成立的钻石。\n\ndiamonds %&gt;%\n  filter(clarity == \"VVS2\") # 仅筛选VVS2级净度的钻石\n\n# A tibble: 5,066 × 10\n   carat cut       color clarity depth table price     x     y     z\n   &lt;dbl&gt; &lt;ord&gt;     &lt;ord&gt; &lt;ord&gt;   &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n 1  0.24 Very Good J     VVS2     62.8    57   336  3.94  3.96  2.48\n 2  0.23 Very Good G     VVS2     60.4    58   354  3.97  4.01  2.41\n 3  0.28 Ideal     G     VVS2     61.4    56   553  4.19  4.22  2.58\n 4  0.26 Very Good F     VVS2     59.2    60   554  4.19  4.22  2.49\n 5  0.26 Very Good E     VVS2     59.9    58   554  4.15  4.23  2.51\n 6  0.26 Very Good D     VVS2     62.4    54   554  4.08  4.13  2.56\n 7  0.26 Very Good D     VVS2     62.8    60   554  4.01  4.05  2.53\n 8  0.26 Ideal     E     VVS2     62.9    58   554  4.02  4.06  2.54\n 9  0.24 Premium   H     VVS2     60.7    58   554  4.07  4.04  2.46\n10  0.74 Ideal     I     VVS2     62.3    55  2761  5.77  5.81  3.61\n# ℹ 5,056 more rows"
  },
  {
    "objectID": "dplyr-mutate.html#rename",
    "href": "dplyr-mutate.html#rename",
    "title": "8  dplyr 更改或新建",
    "section": "8.1 rename()",
    "text": "8.1 rename()\n\nlibrary(tidyverse)\n\n# 把 price 改名为 price_usd\ndiamonds %&gt;%\n  rename(price_usd = price)\n\n# A tibble: 53,940 × 10\n   carat cut       color clarity depth table price_usd     x     y     z\n   &lt;dbl&gt; &lt;ord&gt;     &lt;ord&gt; &lt;ord&gt;   &lt;dbl&gt; &lt;dbl&gt;     &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n 1  0.23 Ideal     E     SI2      61.5    55       326  3.95  3.98  2.43\n 2  0.21 Premium   E     SI1      59.8    61       326  3.89  3.84  2.31\n 3  0.23 Good      E     VS1      56.9    65       327  4.05  4.07  2.31\n 4  0.29 Premium   I     VS2      62.4    58       334  4.2   4.23  2.63\n 5  0.31 Good      J     SI2      63.3    58       335  4.34  4.35  2.75\n 6  0.24 Very Good J     VVS2     62.8    57       336  3.94  3.96  2.48\n 7  0.24 Very Good I     VVS1     62.3    57       336  3.95  3.98  2.47\n 8  0.26 Very Good H     SI1      61.9    55       337  4.07  4.11  2.53\n 9  0.22 Fair      E     VS2      65.1    61       337  3.87  3.78  2.49\n10  0.23 Very Good H     VS1      59.4    61       338  4     4.05  2.39\n# ℹ 53,930 more rows\n\n# 把 x, y, z 分别改名为 size_x, size_y, size_z\ndiamonds %&gt;%\n  rename(\n    size_x = x,\n    size_y = y,\n    size_z = z\n  )\n\n# A tibble: 53,940 × 10\n   carat cut       color clarity depth table price size_x size_y size_z\n   &lt;dbl&gt; &lt;ord&gt;     &lt;ord&gt; &lt;ord&gt;   &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt;  &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt;\n 1  0.23 Ideal     E     SI2      61.5    55   326   3.95   3.98   2.43\n 2  0.21 Premium   E     SI1      59.8    61   326   3.89   3.84   2.31\n 3  0.23 Good      E     VS1      56.9    65   327   4.05   4.07   2.31\n 4  0.29 Premium   I     VS2      62.4    58   334   4.2    4.23   2.63\n 5  0.31 Good      J     SI2      63.3    58   335   4.34   4.35   2.75\n 6  0.24 Very Good J     VVS2     62.8    57   336   3.94   3.96   2.48\n 7  0.24 Very Good I     VVS1     62.3    57   336   3.95   3.98   2.47\n 8  0.26 Very Good H     SI1      61.9    55   337   4.07   4.11   2.53\n 9  0.22 Fair      E     VS2      65.1    61   337   3.87   3.78   2.49\n10  0.23 Very Good H     VS1      59.4    61   338   4      4.05   2.39\n# ℹ 53,930 more rows"
  },
  {
    "objectID": "dplyr-mutate.html#mutate",
    "href": "dplyr-mutate.html#mutate",
    "title": "8  dplyr 更改或新建",
    "section": "8.2 mutate()",
    "text": "8.2 mutate()\n\n# 新建变量 price_rmb，即换算为人民币，假设汇率为7\ndiamonds %&gt;%\n  mutate(price_rmb = price * 7)\n\n# A tibble: 53,940 × 11\n   carat cut       color clarity depth table price     x     y     z price_rmb\n   &lt;dbl&gt; &lt;ord&gt;     &lt;ord&gt; &lt;ord&gt;   &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;     &lt;dbl&gt;\n 1  0.23 Ideal     E     SI2      61.5    55   326  3.95  3.98  2.43      2282\n 2  0.21 Premium   E     SI1      59.8    61   326  3.89  3.84  2.31      2282\n 3  0.23 Good      E     VS1      56.9    65   327  4.05  4.07  2.31      2289\n 4  0.29 Premium   I     VS2      62.4    58   334  4.2   4.23  2.63      2338\n 5  0.31 Good      J     SI2      63.3    58   335  4.34  4.35  2.75      2345\n 6  0.24 Very Good J     VVS2     62.8    57   336  3.94  3.96  2.48      2352\n 7  0.24 Very Good I     VVS1     62.3    57   336  3.95  3.98  2.47      2352\n 8  0.26 Very Good H     SI1      61.9    55   337  4.07  4.11  2.53      2359\n 9  0.22 Fair      E     VS2      65.1    61   337  3.87  3.78  2.49      2359\n10  0.23 Very Good H     VS1      59.4    61   338  4     4.05  2.39      2366\n# ℹ 53,930 more rows\n\n# 更改变量 price，换算为人民币，假设汇率为7\ndiamonds %&gt;%\n  mutate(price = price * 7)\n\n# A tibble: 53,940 × 10\n   carat cut       color clarity depth table price     x     y     z\n   &lt;dbl&gt; &lt;ord&gt;     &lt;ord&gt; &lt;ord&gt;   &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n 1  0.23 Ideal     E     SI2      61.5    55  2282  3.95  3.98  2.43\n 2  0.21 Premium   E     SI1      59.8    61  2282  3.89  3.84  2.31\n 3  0.23 Good      E     VS1      56.9    65  2289  4.05  4.07  2.31\n 4  0.29 Premium   I     VS2      62.4    58  2338  4.2   4.23  2.63\n 5  0.31 Good      J     SI2      63.3    58  2345  4.34  4.35  2.75\n 6  0.24 Very Good J     VVS2     62.8    57  2352  3.94  3.96  2.48\n 7  0.24 Very Good I     VVS1     62.3    57  2352  3.95  3.98  2.47\n 8  0.26 Very Good H     SI1      61.9    55  2359  4.07  4.11  2.53\n 9  0.22 Fair      E     VS2      65.1    61  2359  3.87  3.78  2.49\n10  0.23 Very Good H     VS1      59.4    61  2366  4     4.05  2.39\n# ℹ 53,930 more rows\n\n# 新建变量 size，由 x, y, z 相乘而得（不代表钻石真实体积）\ndiamonds %&gt;%\n  mutate(size = x * y * z)\n\n# A tibble: 53,940 × 11\n   carat cut       color clarity depth table price     x     y     z  size\n   &lt;dbl&gt; &lt;ord&gt;     &lt;ord&gt; &lt;ord&gt;   &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n 1  0.23 Ideal     E     SI2      61.5    55   326  3.95  3.98  2.43  38.2\n 2  0.21 Premium   E     SI1      59.8    61   326  3.89  3.84  2.31  34.5\n 3  0.23 Good      E     VS1      56.9    65   327  4.05  4.07  2.31  38.1\n 4  0.29 Premium   I     VS2      62.4    58   334  4.2   4.23  2.63  46.7\n 5  0.31 Good      J     SI2      63.3    58   335  4.34  4.35  2.75  51.9\n 6  0.24 Very Good J     VVS2     62.8    57   336  3.94  3.96  2.48  38.7\n 7  0.24 Very Good I     VVS1     62.3    57   336  3.95  3.98  2.47  38.8\n 8  0.26 Very Good H     SI1      61.9    55   337  4.07  4.11  2.53  42.3\n 9  0.22 Fair      E     VS2      65.1    61   337  3.87  3.78  2.49  36.4\n10  0.23 Very Good H     VS1      59.4    61   338  4     4.05  2.39  38.7\n# ℹ 53,930 more rows"
  },
  {
    "objectID": "dplyr-stat.html#count",
    "href": "dplyr-stat.html#count",
    "title": "9  dplyr 统计",
    "section": "9.1 count()",
    "text": "9.1 count()\n\nlibrary(tidyverse)\n\n# 显示每一类的数量\ndiamonds %&gt;%\n  count(cut)\n\n# A tibble: 5 × 2\n  cut           n\n  &lt;ord&gt;     &lt;int&gt;\n1 Fair       1610\n2 Good       4906\n3 Very Good 12082\n4 Premium   13791\n5 Ideal     21551"
  },
  {
    "objectID": "dplyr-stat.html#tab-和-tab1",
    "href": "dplyr-stat.html#tab-和-tab1",
    "title": "9  dplyr 统计",
    "section": "9.2 tab() 和 tab1()",
    "text": "9.2 tab() 和 tab1()\n\n\n\n\n\n\n注意\n\n\n\n这两个函数来自于我正在开发的 statart 包，暂时只能通过 source() 函数调用。\n\n\n\n# 在 count() 的基础上，多了很多信息\ndiamonds %&gt;%\n  tab(cut)\n\n# A tibble: 6 × 4\n  cut           n percent    cum\n  &lt;chr&gt;     &lt;int&gt;   &lt;dbl&gt;  &lt;dbl&gt;\n1 Fair       1610    2.98   2.98\n2 Good       4906    9.10  12.1 \n3 Very Good 12082   22.4   34.5 \n4 Premium   13791   25.6   60.0 \n5 Ideal     21551   40.0  100   \n6 total     53940  100     NA   \n\n# 自动转换成列联表\ndiamonds %&gt;%\n  tab(cut, clarity)\n\n# A tibble: 6 × 10\n  cut          I1   SI2   SI1   VS2   VS1  VVS2  VVS1    IF total\n  &lt;chr&gt;     &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt;\n1 Fair        210   466   408   261   170    69    17     9  1610\n2 Good         96  1081  1560   978   648   286   186    71  4906\n3 Very Good    84  2100  3240  2591  1775  1235   789   268 12082\n4 Premium     205  2949  3575  3357  1989   870   616   230 13791\n5 Ideal       146  2598  4282  5071  3589  2606  2047  1212 21551\n6 total       741  9194 13065 12258  8171  5066  3655  1790 53940\n\n# 同时 tab1() 多个变量\ndiamonds %&gt;%\n  tab1(cut:clarity)\n\n$cut\n# A tibble: 6 × 4\n  value         n percent    cum\n  &lt;chr&gt;     &lt;int&gt;   &lt;dbl&gt;  &lt;dbl&gt;\n1 Fair       1610    2.98   2.98\n2 Good       4906    9.10  12.1 \n3 Very Good 12082   22.4   34.5 \n4 Premium   13791   25.6   60.0 \n5 Ideal     21551   40.0  100   \n6 total     53940  100     NA   \n\n$color\n# A tibble: 8 × 4\n  value     n percent   cum\n  &lt;chr&gt; &lt;int&gt;   &lt;dbl&gt; &lt;dbl&gt;\n1 D      6775   12.6   12.6\n2 E      9797   18.2   30.7\n3 F      9542   17.7   48.4\n4 G     11292   20.9   69.3\n5 H      8304   15.4   84.7\n6 I      5422   10.1   94.8\n7 J      2808    5.21 100  \n8 total 53940  100     NA  \n\n$clarity\n# A tibble: 9 × 4\n  value     n percent    cum\n  &lt;chr&gt; &lt;int&gt;   &lt;dbl&gt;  &lt;dbl&gt;\n1 I1      741    1.37   1.37\n2 SI2    9194   17.0   18.4 \n3 SI1   13065   24.2   42.6 \n4 VS2   12258   22.7   65.4 \n5 VS1    8171   15.1   80.5 \n6 VVS2   5066    9.39  89.9 \n7 VVS1   3655    6.78  96.7 \n8 IF     1790    3.32 100   \n9 total 53940  100     NA   \n\n# 同时 tab1() 多个变量，并返回成一个数据\ndiamonds %&gt;%\n  tab1(cut:clarity, .append = TRUE)\n\n# A tibble: 23 × 5\n   variable value         n percent    cum\n   &lt;chr&gt;    &lt;chr&gt;     &lt;int&gt;   &lt;dbl&gt;  &lt;dbl&gt;\n 1 cut      Fair       1610    2.98   2.98\n 2 cut      Good       4906    9.10  12.1 \n 3 cut      Very Good 12082   22.4   34.5 \n 4 cut      Premium   13791   25.6   60.0 \n 5 cut      Ideal     21551   40.0  100   \n 6 cut      total     53940  100     NA   \n 7 color    D          6775   12.6   12.6 \n 8 color    E          9797   18.2   30.7 \n 9 color    F          9542   17.7   48.4 \n10 color    G         11292   20.9   69.3 \n11 color    H          8304   15.4   84.7 \n12 color    I          5422   10.1   94.8 \n13 color    J          2808    5.21 100   \n14 color    total     53940  100     NA   \n15 clarity  I1          741    1.37   1.37\n16 clarity  SI2        9194   17.0   18.4 \n17 clarity  SI1       13065   24.2   42.6 \n18 clarity  VS2       12258   22.7   65.4 \n19 clarity  VS1        8171   15.1   80.5 \n20 clarity  VVS2       5066    9.39  89.9 \n21 clarity  VVS1       3655    6.78  96.7 \n22 clarity  IF         1790    3.32 100   \n23 clarity  total     53940  100     NA"
  },
  {
    "objectID": "dplyr-stat.html#summarise",
    "href": "dplyr-stat.html#summarise",
    "title": "9  dplyr 统计",
    "section": "9.3 summarise()",
    "text": "9.3 summarise()\n\n# 平均钻石价格\ndiamonds %&gt;%\n  summarise(mean(price))\n\n# A tibble: 1 × 1\n  `mean(price)`\n          &lt;dbl&gt;\n1         3933.\n\n# 指定变量名\ndiamonds %&gt;%\n  summarise(price = mean(price))\n\n# A tibble: 1 × 1\n  price\n  &lt;dbl&gt;\n1 3933."
  },
  {
    "objectID": "dplyr-stat.html#summ",
    "href": "dplyr-stat.html#summ",
    "title": "9  dplyr 统计",
    "section": "9.4 summ()",
    "text": "9.4 summ()\n为了解决 summarise() 太原始的问题，我尽可能兼顾简便和实用，设计了一个新的函数 summ()。下面我来演示一些基础功能：\n\n\n\n\n\n\n注意\n\n\n\n这个函数来自于我正在开发的 statart 包，暂时只能通过 source() 函数调用。\n\n\n\n# 统计 price 的变量类型、非缺失数、类别数、均值、标准差、最小值和最大值\ndiamonds %&gt;%\n  summ(price)\n\n# A tibble: 1 × 8\n  variable type      n unique  mean    sd   min   max\n  &lt;chr&gt;    &lt;chr&gt; &lt;int&gt;  &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; &lt;int&gt;\n1 price    int   53940  11602 3933. 3989.   326 18823\n\n\n解释一下上面的统计量：\n\nvariable 是变量名\ntype 是变量类型（如变量有单位，则为单位）\nn 是该变量非缺失值的数量\nunique 是变量的类别数（有多少个不重复的取值）\n\n显然，unique \\(\\leq\\) n\nunique 越大，意味着这个变量越“连续”，信息越丰富\n比方说，年龄一般是0-120之间的某个正整数，而相应月龄的数量是年龄的12倍，日龄尤甚。所以在这三个变量里，日龄一般最平滑、最连续，信息量最大，相应的 unique 数也最大。\n\nmean 是均值\nsd 是标准差\nmin 是最小值\nmax 是最大值\n\n\n# 同时统计多个变量\ndiamonds %&gt;%\n  summ(x:z)\n\n# A tibble: 3 × 8\n  variable type      n unique  mean    sd   min   max\n  &lt;chr&gt;    &lt;chr&gt; &lt;int&gt;  &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n1 x        dbl   53940    554  5.73 1.12      0  10.7\n2 y        dbl   53940    552  5.73 1.14      0  58.9\n3 z        dbl   53940    375  3.54 0.706     0  31.8\n\n\n在 x, y, z 这三个维度上，钻石的 z（高度）最小，而 x 和 y 的均值几乎一样。\n\n# 展示所有统计量\ndiamonds %&gt;%\n  summ(x:z, .detail = TRUE) %&gt;%\n  print(width = Inf)\n\n# A tibble: 3 × 18\n  variable type      n unique miss_n valid_pct   min    q1 median  mean   mad\n  &lt;chr&gt;    &lt;chr&gt; &lt;int&gt;  &lt;int&gt;  &lt;int&gt;     &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;  &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n1 x        dbl   53940    554      0         1     0  4.71   5.7   5.73 1.38 \n2 y        dbl   53940    552      0         1     0  4.72   5.71  5.73 1.36 \n3 z        dbl   53940    375      0         1     0  2.91   3.53  3.54 0.845\n     sd    q3   max   iqr  skew kurtosis      se\n  &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;    &lt;dbl&gt;   &lt;dbl&gt;\n1 1.12   6.54  10.7  1.83 0.379   -0.618 0.00483\n2 1.14   6.54  58.9  1.82 2.43    91.2   0.00492\n3 0.706  4.04  31.8  1.13 1.52    47.1   0.00304\n\n\n可以看到，其实 x 和 y 在四分位数（q1 和 q3）上没有什么差别，但是它们的最大值（max）、偏度（skew）和峰度（kurtosis）上相差很多。我猜想，对于一些不规则的钻石，可能会把短边选为 x，而长边选为 y。\n\n# 自己选择一些统计量\ndiamonds %&gt;%\n  summ(x:z, .stat = c(\"valid_pct\", \"mean\", \"se\"))\n\n# A tibble: 3 × 5\n  variable type  valid_pct  mean      se\n  &lt;chr&gt;    &lt;chr&gt;     &lt;dbl&gt; &lt;dbl&gt;   &lt;dbl&gt;\n1 x        dbl           1  5.73 0.00483\n2 y        dbl           1  5.73 0.00492\n3 z        dbl           1  3.54 0.00304\n\n\nvalid_pct 表示非缺失值的比例，这里为1，说明完全无缺失。se 是标准误，也就是对均值的误差估计。\n\n# 一次性选择所有变量\ndiamonds %&gt;%\n  summ(everything())\n\nWarning in summ(., everything()): \n      cut, color, clarity are factor variables.\n      They are summarised (***), but the statistics may be misleading.\n      Consider using `tab1()` instead.\n\n\n# A tibble: 10 × 8\n   variable   type      n unique     mean       sd   min      max\n   &lt;chr&gt;      &lt;chr&gt; &lt;int&gt;  &lt;int&gt;    &lt;dbl&gt;    &lt;dbl&gt; &lt;dbl&gt;    &lt;dbl&gt;\n 1 carat      dbl   53940    273    0.798    0.474   0.2     5.01\n 2 cut***     ord   53940      5    3.90     1.12    1       5   \n 3 color***   ord   53940      7    3.59     1.70    1       7   \n 4 clarity*** ord   53940      8    4.05     1.65    1       8   \n 5 depth      dbl   53940    184   61.7      1.43   43      79   \n 6 table      dbl   53940    127   57.5      2.23   43      95   \n 7 price      int   53940  11602 3933.    3989.    326   18823   \n 8 x          dbl   53940    554    5.73     1.12    0      10.7 \n 9 y          dbl   53940    552    5.73     1.14    0      58.9 \n10 z          dbl   53940    375    3.54     0.706   0      31.8 \n\n\n请注意，因为 cut, color, clarity 都是定序变量，所以 summ() 它们比较牵强。对它们使用前文的 tab1() 会更为合适。\n\n\n\nRows: 1,000\nColumns: 14\n$ date      &lt;date&gt; 2024-02-08, 2024-02-07, 2024-02-06, 2024-02-05, 2024-02-04,…\n$ time      &lt;dttm&gt; 2024-02-09 11:59:59, 2024-02-09 11:59:58, 2024-02-09 11:59:…\n$ duration1 &lt;drtn&gt; 3 hours, 4 hours, 5 hours, 6 hours, 7 hours, 8 hours, 9 hou…\n$ duration2 &lt;time&gt; 12:34:56, 12:34:56, 12:34:56, 12:34:56, 12:34:56, 12:34:56,…\n$ string    &lt;chr&gt; \"ABC\", \"ABC\", \"ABC\", \"ABC\", \"ABC\", \"ABC\", \"ABC\", \"ABC\", \"ABC…\n$ logical   &lt;lgl&gt; TRUE, FALSE, TRUE, FALSE, TRUE, FALSE, TRUE, FALSE, TRUE, FA…\n$ unit1     [m] 1 [m], 2 [m], 3 [m], 4 [m], 5 [m], 6 [m], 7 [m], 8 [m], 9 [m],…\n$ unit2     [m^2] 1 [m^2], 2 [m^2], 3 [m^2], 4 [m^2], 5 [m^2], 6 [m^2], 7 [m^2…\n$ factor    &lt;fct&gt; a, b, a, b, a, b, a, b, a, b, a, b, a, b, a, b, a, b, a, b, …\n$ order     &lt;ord&gt; a, b, a, b, a, b, a, b, a, b, a, b, a, b, a, b, a, b, a, b, …\n$ double    &lt;dbl&gt; 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0, 1.1, 1.2, …\n$ integer   &lt;int&gt; 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 1…\n$ half_miss &lt;dbl&gt; 1, NA, 3, NA, 5, NA, 7, NA, 9, NA, 11, NA, 13, NA, 15, NA, 1…\n$ all_miss  &lt;dbl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n\n\n\n\ncomplex_tb %&gt;%\n  codebook()\n\nWarning in un[i] &lt;- at$units: number of items to replace is not a multiple of\nreplacement length\nWarning in un[i] &lt;- at$units: number of items to replace is not a multiple of\nreplacement length\n\n\n# A tibble: 14 × 4\n   variable  type                 n unique\n   &lt;chr&gt;     &lt;chr&gt;            &lt;int&gt;  &lt;int&gt;\n 1 date      date              1000   1000\n 2 time      datetime          1000   1000\n 3 duration1 duration [hours]  1000   1000\n 4 duration2 time [secs]       1000      1\n 5 string    character         1000      1\n 6 logical   logical           1000      2\n 7 unit1     units [m]         1000   1000\n 8 unit2     units [m^2]       1000   1000\n 9 factor    factor            1000      2\n10 order     ordered           1000      2\n11 double    double            1000   1000\n12 integer   integer           1000   1000\n13 half_miss double             500    500\n14 all_miss  double               0      0\n\n\n\ncomplex_tb %&gt;%\n  summ(everything())\n\nWarning in summ(., everything()): \n    string is non-numeric.\n    Use `tab()` instead.\n\n\nWarning in summ(., everything()): \n      date, time are date or datetime variables.\n      Use `summ_date()` or `summ_all()` instead.\n\n\nWarning in summ(., everything()): \n      factor, order are factor variables.\n      They are summarised (***), but the statistics may be misleading.\n      Consider using `tab1()` instead.\n\n\nWarning in summ(., everything()): \n    all_miss is entirely missing and thus removed.\n\n\n# A tibble: 10 × 8\n   variable  type        n unique    mean      sd     min   max\n   &lt;chr&gt;     &lt;chr&gt;   &lt;int&gt;  &lt;int&gt;   &lt;dbl&gt;   &lt;dbl&gt;   &lt;dbl&gt; &lt;dbl&gt;\n 1 duration1 [hours]  1000   1000   502.  289.        3    1002\n 2 duration2 [secs]   1000      1 45296     0     45296   45296\n 3 logical   lgl      1000      2     0.5   0.500     0       1\n 4 unit1     [m]      1000   1000   500.  289.        1    1000\n 5 unit2     [m^2]    1000   1000   500.  289.        1    1000\n 6 factor*** fct      1000      2     1.5   0.500     1       2\n 7 order***  ord      1000      2     1.5   0.500     1       2\n 8 double    dbl      1000   1000    50.0  28.9       0.1   100\n 9 integer   int      1000   1000   500.  289.        1    1000\n10 half_miss dbl       500    500   500   289.        1     999"
  },
  {
    "objectID": "dplyr-group.html#summarise...-.by",
    "href": "dplyr-group.html#summarise...-.by",
    "title": "10  dplyr 分组",
    "section": "10.1 summarise(..., .by)",
    "text": "10.1 summarise(..., .by)\n\nlibrary(tidyverse)\n\nWarning: package 'ggplot2' was built under R version 4.3.3\n\n\nWarning: package 'stringr' was built under R version 4.3.2\n\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.2     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.2     ✔ tidyr     1.3.0\n✔ purrr     1.0.1     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\ndiamonds %&gt;%\n  summarise(\n    price = mean(price),\n    .by = clarity\n  )\n\n# A tibble: 8 × 2\n  clarity price\n  &lt;ord&gt;   &lt;dbl&gt;\n1 SI2     5063.\n2 SI1     3996.\n3 VS1     3839.\n4 VS2     3925.\n5 VVS2    3284.\n6 VVS1    2523.\n7 I1      3924.\n8 IF      2865.\n\ndiamonds %&gt;%\n  summarise(\n    price = mean(price),\n    .by = c(cut, clarity)\n  )\n\n# A tibble: 40 × 3\n   cut       clarity price\n   &lt;ord&gt;     &lt;ord&gt;   &lt;dbl&gt;\n 1 Ideal     SI2     4756.\n 2 Premium   SI1     4455.\n 3 Good      VS1     3801.\n 4 Premium   VS2     4550.\n 5 Good      SI2     4580.\n 6 Very Good VVS2    3038.\n 7 Very Good VVS1    2459.\n 8 Very Good SI1     3932.\n 9 Fair      VS2     4175.\n10 Very Good VS1     3805.\n# ℹ 30 more rows"
  },
  {
    "objectID": "dplyr-group.html#summ...-.by",
    "href": "dplyr-group.html#summ...-.by",
    "title": "10  dplyr 分组",
    "section": "10.2 summ(..., .by)",
    "text": "10.2 summ(..., .by)\n\ndiamonds %&gt;%\n  summ(price, .by = clarity)\n\n# A tibble: 8 × 9\n  clarity variable type      n unique  mean    sd   min   max\n  &lt;ord&gt;   &lt;chr&gt;    &lt;chr&gt; &lt;int&gt;  &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; &lt;int&gt;\n1 SI2     price    int    9194   4904 5063. 4260.   326 18804\n2 SI1     price    int   13065   5380 3996. 3799.   326 18818\n3 VS1     price    int    8171   3926 3839. 4012.   327 18795\n4 VS2     price    int   12258   5051 3925. 4042.   334 18823\n5 VVS2    price    int    5066   2409 3284. 3822.   336 18768\n6 VVS1    price    int    3655   1623 2523. 3335.   336 18777\n7 I1      price    int     741    632 3924. 2807.   345 18531\n8 IF      price    int    1790    902 2865. 3920.   369 18806\n\ndiamonds %&gt;%\n  summ(price, .by = c(cut, clarity))\n\n# A tibble: 40 × 10\n   cut       clarity variable type      n unique  mean    sd   min   max\n   &lt;ord&gt;     &lt;ord&gt;   &lt;chr&gt;    &lt;chr&gt; &lt;int&gt;  &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; &lt;int&gt;\n 1 Ideal     SI2     price    int    2598   1922 4756. 4252.   326 18804\n 2 Premium   SI1     price    int    3575   2107 4455. 4071.   326 18797\n 3 Good      VS1     price    int     648    548 3801. 3703.   327 18340\n 4 Premium   VS2     price    int    3357   1868 4550. 4457.   334 18823\n 5 Good      SI2     price    int    1081    880 4580. 3901.   335 18788\n 6 Very Good VVS2    price    int    1235    791 3038. 3768.   336 18211\n 7 Very Good VVS1    price    int     789    511 2459. 3317.   336 18777\n 8 Very Good SI1     price    int    3240   2107 3932. 3708.   337 18818\n 9 Fair      VS2     price    int     261    240 4175. 3532.   337 18565\n10 Very Good VS1     price    int    1775   1304 3805. 3864.   338 18500\n# ℹ 30 more rows\n\ndiamonds %&gt;%\n  summ(x:z, .by = clarity)\n\n# A tibble: 24 × 9\n   clarity variable type      n unique  mean    sd   min   max\n   &lt;ord&gt;   &lt;chr&gt;    &lt;chr&gt; &lt;int&gt;  &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n 1 SI2     x        dbl    9194    492  6.40 1.06   0     9.51\n 2 SI2     y        dbl    9194    490  6.40 1.18   0    58.9 \n 3 SI2     z        dbl    9194    320  3.95 0.660  0     8.06\n 4 SI1     x        dbl   13065    480  5.89 1.04   3.88  8.9 \n 5 SI1     y        dbl   13065    471  5.89 1.04   3.84  8.87\n 6 SI1     z        dbl   13065    301  3.64 0.645  0     5.49\n 7 VS1     x        dbl    8171    466  5.57 1.06   0     8.83\n 8 VS1     y        dbl    8171    456  5.58 1.10   0    31.8 \n 9 VS1     z        dbl    8171    297  3.44 0.725  0    31.8 \n10 VS2     x        dbl   12258    490  5.66 1.09   0     9.66\n# ℹ 14 more rows"
  },
  {
    "objectID": "dplyr-group.html#mutate...-.by",
    "href": "dplyr-group.html#mutate...-.by",
    "title": "10  dplyr 分组",
    "section": "10.3 mutate(..., .by)",
    "text": "10.3 mutate(..., .by)\n\ndiamonds %&gt;%\n  mutate(\n    price = mean(price),\n    .by = clarity\n  )\n\n# A tibble: 53,940 × 10\n   carat cut       color clarity depth table price     x     y     z\n   &lt;dbl&gt; &lt;ord&gt;     &lt;ord&gt; &lt;ord&gt;   &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n 1  0.23 Ideal     E     SI2      61.5    55 5063.  3.95  3.98  2.43\n 2  0.21 Premium   E     SI1      59.8    61 3996.  3.89  3.84  2.31\n 3  0.23 Good      E     VS1      56.9    65 3839.  4.05  4.07  2.31\n 4  0.29 Premium   I     VS2      62.4    58 3925.  4.2   4.23  2.63\n 5  0.31 Good      J     SI2      63.3    58 5063.  4.34  4.35  2.75\n 6  0.24 Very Good J     VVS2     62.8    57 3284.  3.94  3.96  2.48\n 7  0.24 Very Good I     VVS1     62.3    57 2523.  3.95  3.98  2.47\n 8  0.26 Very Good H     SI1      61.9    55 3996.  4.07  4.11  2.53\n 9  0.22 Fair      E     VS2      65.1    61 3925.  3.87  3.78  2.49\n10  0.23 Very Good H     VS1      59.4    61 3839.  4     4.05  2.39\n# ℹ 53,930 more rows\n\ndiamonds %&gt;%\n  mutate(\n    mean_price = mean(price),\n    .by = clarity\n  )\n\n# A tibble: 53,940 × 11\n   carat cut       color clarity depth table price     x     y     z mean_price\n   &lt;dbl&gt; &lt;ord&gt;     &lt;ord&gt; &lt;ord&gt;   &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;      &lt;dbl&gt;\n 1  0.23 Ideal     E     SI2      61.5    55   326  3.95  3.98  2.43      5063.\n 2  0.21 Premium   E     SI1      59.8    61   326  3.89  3.84  2.31      3996.\n 3  0.23 Good      E     VS1      56.9    65   327  4.05  4.07  2.31      3839.\n 4  0.29 Premium   I     VS2      62.4    58   334  4.2   4.23  2.63      3925.\n 5  0.31 Good      J     SI2      63.3    58   335  4.34  4.35  2.75      5063.\n 6  0.24 Very Good J     VVS2     62.8    57   336  3.94  3.96  2.48      3284.\n 7  0.24 Very Good I     VVS1     62.3    57   336  3.95  3.98  2.47      2523.\n 8  0.26 Very Good H     SI1      61.9    55   337  4.07  4.11  2.53      3996.\n 9  0.22 Fair      E     VS2      65.1    61   337  3.87  3.78  2.49      3925.\n10  0.23 Very Good H     VS1      59.4    61   338  4     4.05  2.39      3839.\n# ℹ 53,930 more rows\n\ndiamonds %&gt;%\n  mutate(\n    price3g = cut(price, 3),\n    .by = color\n  )\n\n# A tibble: 53,940 × 11\n   carat cut       color clarity depth table price     x     y     z price3g    \n   &lt;dbl&gt; &lt;ord&gt;     &lt;ord&gt; &lt;ord&gt;   &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;fct&gt;      \n 1  0.23 Ideal     E     SI2      61.5    55   326  3.95  3.98  2.43 (308,6.46e…\n 2  0.21 Premium   E     SI1      59.8    61   326  3.89  3.84  2.31 (308,6.46e…\n 3  0.23 Good      E     VS1      56.9    65   327  4.05  4.07  2.31 (308,6.46e…\n 4  0.29 Premium   I     VS2      62.4    58   334  4.2   4.23  2.63 (316,6.5e+…\n 5  0.31 Good      J     SI2      63.3    58   335  4.34  4.35  2.75 (317,6.46e…\n 6  0.24 Very Good J     VVS2     62.8    57   336  3.94  3.96  2.48 (317,6.46e…\n 7  0.24 Very Good I     VVS1     62.3    57   336  3.95  3.98  2.47 (316,6.5e+…\n 8  0.26 Very Good H     SI1      61.9    55   337  4.07  4.11  2.53 (319,6.49e…\n 9  0.22 Fair      E     VS2      65.1    61   337  3.87  3.78  2.49 (308,6.46e…\n10  0.23 Very Good H     VS1      59.4    61   338  4     4.05  2.39 (319,6.49e…\n# ℹ 53,930 more rows"
  },
  {
    "objectID": "dplyr-group.html#group_by",
    "href": "dplyr-group.html#group_by",
    "title": "10  dplyr 分组",
    "section": "10.4 group_by()",
    "text": "10.4 group_by()\n\ndiamonds %&gt;%\n  group_by(cut)\n\n# A tibble: 53,940 × 10\n# Groups:   cut [5]\n   carat cut       color clarity depth table price     x     y     z\n   &lt;dbl&gt; &lt;ord&gt;     &lt;ord&gt; &lt;ord&gt;   &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n 1  0.23 Ideal     E     SI2      61.5    55   326  3.95  3.98  2.43\n 2  0.21 Premium   E     SI1      59.8    61   326  3.89  3.84  2.31\n 3  0.23 Good      E     VS1      56.9    65   327  4.05  4.07  2.31\n 4  0.29 Premium   I     VS2      62.4    58   334  4.2   4.23  2.63\n 5  0.31 Good      J     SI2      63.3    58   335  4.34  4.35  2.75\n 6  0.24 Very Good J     VVS2     62.8    57   336  3.94  3.96  2.48\n 7  0.24 Very Good I     VVS1     62.3    57   336  3.95  3.98  2.47\n 8  0.26 Very Good H     SI1      61.9    55   337  4.07  4.11  2.53\n 9  0.22 Fair      E     VS2      65.1    61   337  3.87  3.78  2.49\n10  0.23 Very Good H     VS1      59.4    61   338  4     4.05  2.39\n# ℹ 53,930 more rows\n\ndiamonds %&gt;%\n  group_by(cut) %&gt;%\n  summarise(price = mean(price))\n\n# A tibble: 5 × 2\n  cut       price\n  &lt;ord&gt;     &lt;dbl&gt;\n1 Fair      4359.\n2 Good      3929.\n3 Very Good 3982.\n4 Premium   4584.\n5 Ideal     3458.\n\ndiamonds %&gt;%\n  group_by(cut) %&gt;%\n  summ(price)\n\n# A tibble: 5 × 9\n  cut       variable type      n unique  mean    sd   min   max\n  &lt;ord&gt;     &lt;chr&gt;    &lt;chr&gt; &lt;int&gt;  &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; &lt;int&gt;\n1 Fair      price    int    1610   1267 4359. 3560.   337 18574\n2 Good      price    int    4906   3086 3929. 3682.   327 18788\n3 Very Good price    int   12082   5840 3982. 3936.   336 18818\n4 Premium   price    int   13791   6014 4584. 4349.   326 18823\n5 Ideal     price    int   21551   7281 3458. 3808.   326 18806\n\ndiamonds %&gt;%\n  group_by(clarity) %&gt;%\n  summ(x:z)\n\n# A tibble: 24 × 9\n   clarity variable type      n unique  mean    sd   min   max\n   &lt;ord&gt;   &lt;chr&gt;    &lt;chr&gt; &lt;int&gt;  &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n 1 I1      x        dbl     741    319  6.76 1.03   4.33 10.7 \n 2 I1      y        dbl     741    324  6.71 1.03   4.29 10.5 \n 3 I1      z        dbl     741    249  4.21 0.718  0     6.98\n 4 SI2     x        dbl    9194    492  6.40 1.06   0     9.51\n 5 SI2     y        dbl    9194    490  6.40 1.18   0    58.9 \n 6 SI2     z        dbl    9194    320  3.95 0.660  0     8.06\n 7 SI1     x        dbl   13065    480  5.89 1.04   3.88  8.9 \n 8 SI1     y        dbl   13065    471  5.89 1.04   3.84  8.87\n 9 SI1     z        dbl   13065    301  3.64 0.645  0     5.49\n10 VS2     x        dbl   12258    490  5.66 1.09   0     9.66\n# ℹ 14 more rows\n\ndiamonds %&gt;%\n  group_by(cut) %&gt;%\n  summ(price, .by = clarity)\n\nError in `summarise()`:\n! Can't supply `.by` when `.data` is a grouped data frame.\n\ndiamonds %&gt;%\n  group_by(color) %&gt;%\n  mutate(\n    price3g = cut(price, 3)\n  )\n\n# A tibble: 53,940 × 11\n# Groups:   color [7]\n   carat cut       color clarity depth table price     x     y     z price3g    \n   &lt;dbl&gt; &lt;ord&gt;     &lt;ord&gt; &lt;ord&gt;   &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;fct&gt;      \n 1  0.23 Ideal     E     SI2      61.5    55   326  3.95  3.98  2.43 (308,6.46e…\n 2  0.21 Premium   E     SI1      59.8    61   326  3.89  3.84  2.31 (308,6.46e…\n 3  0.23 Good      E     VS1      56.9    65   327  4.05  4.07  2.31 (308,6.46e…\n 4  0.29 Premium   I     VS2      62.4    58   334  4.2   4.23  2.63 (316,6.5e+…\n 5  0.31 Good      J     SI2      63.3    58   335  4.34  4.35  2.75 (317,6.46e…\n 6  0.24 Very Good J     VVS2     62.8    57   336  3.94  3.96  2.48 (317,6.46e…\n 7  0.24 Very Good I     VVS1     62.3    57   336  3.95  3.98  2.47 (316,6.5e+…\n 8  0.26 Very Good H     SI1      61.9    55   337  4.07  4.11  2.53 (319,6.49e…\n 9  0.22 Fair      E     VS2      65.1    61   337  3.87  3.78  2.49 (308,6.46e…\n10  0.23 Very Good H     VS1      59.4    61   338  4     4.05  2.39 (319,6.49e…\n# ℹ 53,930 more rows"
  },
  {
    "objectID": "dplyr-join.html#bind_rows",
    "href": "dplyr-join.html#bind_rows",
    "title": "11  dplyr 合并",
    "section": "11.1 bind_rows()",
    "text": "11.1 bind_rows()\n\n\n代码\nlibrary(tidyverse)\n\ntb &lt;- starwars %&gt;%\n  select(1:5) %&gt;%\n  slice(1:6)\n\ntb1 &lt;- tb %&gt;%\n  slice(1:3)\n\ntb2 &lt;- tb %&gt;%\n  slice(4:6)\n\n\n\ntb1\n\n# A tibble: 3 × 5\n  name           height  mass hair_color skin_color \n  &lt;chr&gt;           &lt;int&gt; &lt;dbl&gt; &lt;chr&gt;      &lt;chr&gt;      \n1 Luke Skywalker    172    77 blond      fair       \n2 C-3PO             167    75 &lt;NA&gt;       gold       \n3 R2-D2              96    32 &lt;NA&gt;       white, blue\n\ntb2\n\n# A tibble: 3 × 5\n  name        height  mass hair_color  skin_color\n  &lt;chr&gt;        &lt;int&gt; &lt;dbl&gt; &lt;chr&gt;       &lt;chr&gt;     \n1 Darth Vader    202   136 none        white     \n2 Leia Organa    150    49 brown       light     \n3 Owen Lars      178   120 brown, grey light     \n\nbind_rows(tb1, tb2)\n\n# A tibble: 6 × 5\n  name           height  mass hair_color  skin_color \n  &lt;chr&gt;           &lt;int&gt; &lt;dbl&gt; &lt;chr&gt;       &lt;chr&gt;      \n1 Luke Skywalker    172    77 blond       fair       \n2 C-3PO             167    75 &lt;NA&gt;        gold       \n3 R2-D2              96    32 &lt;NA&gt;        white, blue\n4 Darth Vader       202   136 none        white      \n5 Leia Organa       150    49 brown       light      \n6 Owen Lars         178   120 brown, grey light"
  },
  {
    "objectID": "dplyr-join.html#bind_cols",
    "href": "dplyr-join.html#bind_cols",
    "title": "11  dplyr 合并",
    "section": "11.2 bind_cols()",
    "text": "11.2 bind_cols()\n\n\n代码\ntb1 &lt;- tb %&gt;%\n  select(1:3)\ntb2 &lt;- tb %&gt;%\n  select(4:5)\n\n\n\ntb1\n\n# A tibble: 6 × 3\n  name           height  mass\n  &lt;chr&gt;           &lt;int&gt; &lt;dbl&gt;\n1 Luke Skywalker    172    77\n2 C-3PO             167    75\n3 R2-D2              96    32\n4 Darth Vader       202   136\n5 Leia Organa       150    49\n6 Owen Lars         178   120\n\ntb2\n\n# A tibble: 6 × 2\n  hair_color  skin_color \n  &lt;chr&gt;       &lt;chr&gt;      \n1 blond       fair       \n2 &lt;NA&gt;        gold       \n3 &lt;NA&gt;        white, blue\n4 none        white      \n5 brown       light      \n6 brown, grey light      \n\nbind_cols(tb1, tb2)\n\n# A tibble: 6 × 5\n  name           height  mass hair_color  skin_color \n  &lt;chr&gt;           &lt;int&gt; &lt;dbl&gt; &lt;chr&gt;       &lt;chr&gt;      \n1 Luke Skywalker    172    77 blond       fair       \n2 C-3PO             167    75 &lt;NA&gt;        gold       \n3 R2-D2              96    32 &lt;NA&gt;        white, blue\n4 Darth Vader       202   136 none        white      \n5 Leia Organa       150    49 brown       light      \n6 Owen Lars         178   120 brown, grey light"
  },
  {
    "objectID": "dplyr-join.html#left_join",
    "href": "dplyr-join.html#left_join",
    "title": "11  dplyr 合并",
    "section": "11.3 left_join()",
    "text": "11.3 left_join()\n\ntb1 %&gt;%\n  left_join(tb2)\n\nError in `left_join()`:\n! `by` must be supplied when `x` and `y` have no common variables.\nℹ Use `cross_join()` to perform a cross-join.\n\n\n\ntb2 &lt;- tb %&gt;%\n  select(c(1, 4:5))\n\n\ntb1\n\n# A tibble: 6 × 3\n  name           height  mass\n  &lt;chr&gt;           &lt;int&gt; &lt;dbl&gt;\n1 Luke Skywalker    172    77\n2 C-3PO             167    75\n3 R2-D2              96    32\n4 Darth Vader       202   136\n5 Leia Organa       150    49\n6 Owen Lars         178   120\n\ntb2\n\n# A tibble: 6 × 3\n  name           hair_color  skin_color \n  &lt;chr&gt;          &lt;chr&gt;       &lt;chr&gt;      \n1 Luke Skywalker blond       fair       \n2 C-3PO          &lt;NA&gt;        gold       \n3 R2-D2          &lt;NA&gt;        white, blue\n4 Darth Vader    none        white      \n5 Leia Organa    brown       light      \n6 Owen Lars      brown, grey light      \n\ntb1 %&gt;%\n  left_join(tb2)\n\nJoining with `by = join_by(name)`\n\n\n# A tibble: 6 × 5\n  name           height  mass hair_color  skin_color \n  &lt;chr&gt;           &lt;int&gt; &lt;dbl&gt; &lt;chr&gt;       &lt;chr&gt;      \n1 Luke Skywalker    172    77 blond       fair       \n2 C-3PO             167    75 &lt;NA&gt;        gold       \n3 R2-D2              96    32 &lt;NA&gt;        white, blue\n4 Darth Vader       202   136 none        white      \n5 Leia Organa       150    49 brown       light      \n6 Owen Lars         178   120 brown, grey light      \n\ntb1 %&gt;%\n  left_join(tb2, by = \"name\")\n\n# A tibble: 6 × 5\n  name           height  mass hair_color  skin_color \n  &lt;chr&gt;           &lt;int&gt; &lt;dbl&gt; &lt;chr&gt;       &lt;chr&gt;      \n1 Luke Skywalker    172    77 blond       fair       \n2 C-3PO             167    75 &lt;NA&gt;        gold       \n3 R2-D2              96    32 &lt;NA&gt;        white, blue\n4 Darth Vader       202   136 none        white      \n5 Leia Organa       150    49 brown       light      \n6 Owen Lars         178   120 brown, grey light"
  },
  {
    "objectID": "dplyr-skim.html#variables-和-variables_search",
    "href": "dplyr-skim.html#variables-和-variables_search",
    "title": "3  dplyr 浏览",
    "section": "3.2 variables() 和 variables_search()",
    "text": "3.2 variables() 和 variables_search()\n\nvariables(diamonds)\n\n# A tibble: 10 × 1\n   name   \n   &lt;chr&gt;  \n 1 carat  \n 2 cut    \n 3 color  \n 4 clarity\n 5 depth  \n 6 table  \n 7 price  \n 8 x      \n 9 y      \n10 z      \n\nvariables(lifeexp)\n\n# A tibble: 6 × 2\n  name      label                   \n  &lt;chr&gt;     &lt;chr&gt;                   \n1 region    Region                  \n2 country   Country                 \n3 popgrowth Avg. annual % growth    \n4 lexp      Life expectancy at birth\n5 gnppc     GNP per capita          \n6 safewater Safe water              \n\nvariables_search(lifeexp, \"e\")\n\n# A tibble: 3 × 2\n  name      label                   \n  &lt;chr&gt;     &lt;chr&gt;                   \n1 region    Region                  \n2 lexp      Life expectancy at birth\n3 safewater Safe water"
  },
  {
    "objectID": "dplyr-skim.html#names-和-ds",
    "href": "dplyr-skim.html#names-和-ds",
    "title": "3  dplyr 浏览",
    "section": "3.3 names() 和 ds()",
    "text": "3.3 names() 和 ds()\n\nlibrary(tidyverse)\n\n# 罗列变量名\nnames(diamonds)\n\n [1] \"carat\"   \"cut\"     \"color\"   \"clarity\" \"depth\"   \"table\"   \"price\"  \n [8] \"x\"       \"y\"       \"z\"      \n\nnames_as_column(diamonds)\n\n# A tibble: 10 × 1\n   name   \n   &lt;chr&gt;  \n 1 carat  \n 2 cut    \n 3 color  \n 4 clarity\n 5 depth  \n 6 table  \n 7 price  \n 8 x      \n 9 y      \n10 z      \n\nds(diamonds, 1:5)\n\n[1] \"carat\"   \"cut\"     \"color\"   \"clarity\" \"depth\"  \n\nds_as_column(diamonds, 1:5)\n\n# A tibble: 5 × 1\n  name   \n  &lt;chr&gt;  \n1 carat  \n2 cut    \n3 color  \n4 clarity\n5 depth"
  },
  {
    "objectID": "dplyr-grammar.html#select-和-tidyselect",
    "href": "dplyr-grammar.html#select-和-tidyselect",
    "title": "6  dplyr 的两种语法",
    "section": "6.1 select() 和 tidyselect",
    "text": "6.1 select() 和 tidyselect\nselect() 可以根据位置选取列，且支持全部 tidyselect 的语法。\n\nlibrary(tidyverse)\ndiamonds %&gt;%\n  select(5) # 抽取第五列\n\n# A tibble: 53,940 × 1\n   depth\n   &lt;dbl&gt;\n 1  61.5\n 2  59.8\n 3  56.9\n 4  62.4\n 5  63.3\n 6  62.8\n 7  62.3\n 8  61.9\n 9  65.1\n10  59.4\n# ℹ 53,930 more rows\n\ndiamonds %&gt;%\n  select(-5) # 删除第五列\n\n# A tibble: 53,940 × 9\n   carat cut       color clarity table price     x     y     z\n   &lt;dbl&gt; &lt;ord&gt;     &lt;ord&gt; &lt;ord&gt;   &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n 1  0.23 Ideal     E     SI2        55   326  3.95  3.98  2.43\n 2  0.21 Premium   E     SI1        61   326  3.89  3.84  2.31\n 3  0.23 Good      E     VS1        65   327  4.05  4.07  2.31\n 4  0.29 Premium   I     VS2        58   334  4.2   4.23  2.63\n 5  0.31 Good      J     SI2        58   335  4.34  4.35  2.75\n 6  0.24 Very Good J     VVS2       57   336  3.94  3.96  2.48\n 7  0.24 Very Good I     VVS1       57   336  3.95  3.98  2.47\n 8  0.26 Very Good H     SI1        55   337  4.07  4.11  2.53\n 9  0.22 Fair      E     VS2        61   337  3.87  3.78  2.49\n10  0.23 Very Good H     VS1        61   338  4     4.05  2.39\n# ℹ 53,930 more rows\n\n\ntidyselect 也可以根据名称选取列。\n\ndiamonds %&gt;%\n  select(cut) # 选取cut变量\n\n# A tibble: 53,940 × 1\n   cut      \n   &lt;ord&gt;    \n 1 Ideal    \n 2 Premium  \n 3 Good     \n 4 Premium  \n 5 Good     \n 6 Very Good\n 7 Very Good\n 8 Very Good\n 9 Fair     \n10 Very Good\n# ℹ 53,930 more rows\n\ndiamonds %&gt;%\n  select(-cut) # 删除cut变量\n\n# A tibble: 53,940 × 9\n   carat color clarity depth table price     x     y     z\n   &lt;dbl&gt; &lt;ord&gt; &lt;ord&gt;   &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n 1  0.23 E     SI2      61.5    55   326  3.95  3.98  2.43\n 2  0.21 E     SI1      59.8    61   326  3.89  3.84  2.31\n 3  0.23 E     VS1      56.9    65   327  4.05  4.07  2.31\n 4  0.29 I     VS2      62.4    58   334  4.2   4.23  2.63\n 5  0.31 J     SI2      63.3    58   335  4.34  4.35  2.75\n 6  0.24 J     VVS2     62.8    57   336  3.94  3.96  2.48\n 7  0.24 I     VVS1     62.3    57   336  3.95  3.98  2.47\n 8  0.26 H     SI1      61.9    55   337  4.07  4.11  2.53\n 9  0.22 E     VS2      65.1    61   337  3.87  3.78  2.49\n10  0.23 H     VS1      59.4    61   338  4     4.05  2.39\n# ℹ 53,930 more rows"
  },
  {
    "objectID": "dplyr-grammar.html#和-c",
    "href": "dplyr-grammar.html#和-c",
    "title": "6  dplyr 的两种语法",
    "section": "6.2 : 和 c()",
    "text": "6.2 : 和 c()\n: 表示多个连续的整数，比如 1:3 表示 1~3 这三个整数。\n\n1:5\n\n[1] 1 2 3 4 5\n\n# 选取前五个变量\ndiamonds %&gt;%\n  select(1:5)\n\n# A tibble: 53,940 × 5\n   carat cut       color clarity depth\n   &lt;dbl&gt; &lt;ord&gt;     &lt;ord&gt; &lt;ord&gt;   &lt;dbl&gt;\n 1  0.23 Ideal     E     SI2      61.5\n 2  0.21 Premium   E     SI1      59.8\n 3  0.23 Good      E     VS1      56.9\n 4  0.29 Premium   I     VS2      62.4\n 5  0.31 Good      J     SI2      63.3\n 6  0.24 Very Good J     VVS2     62.8\n 7  0.24 Very Good I     VVS1     62.3\n 8  0.26 Very Good H     SI1      61.9\n 9  0.22 Fair      E     VS2      65.1\n10  0.23 Very Good H     VS1      59.4\n# ℹ 53,930 more rows\n\n# 用另一种方式选取前五个变量\ndiamonds %&gt;%\n  select(carat:depth)\n\n# A tibble: 53,940 × 5\n   carat cut       color clarity depth\n   &lt;dbl&gt; &lt;ord&gt;     &lt;ord&gt; &lt;ord&gt;   &lt;dbl&gt;\n 1  0.23 Ideal     E     SI2      61.5\n 2  0.21 Premium   E     SI1      59.8\n 3  0.23 Good      E     VS1      56.9\n 4  0.29 Premium   I     VS2      62.4\n 5  0.31 Good      J     SI2      63.3\n 6  0.24 Very Good J     VVS2     62.8\n 7  0.24 Very Good I     VVS1     62.3\n 8  0.26 Very Good H     SI1      61.9\n 9  0.22 Fair      E     VS2      65.1\n10  0.23 Very Good H     VS1      59.4\n# ℹ 53,930 more rows\n\n\nc() 表示多个数的集合，它比 : 更灵活、更普适，缺点是写起来麻烦些。c(1, 2, 3) 和 c(1:3) 显然都不如 1:3 简洁。但是，c() 既可以表示不连续的整数，也可以表示其他类型的数：\n\nc(1:3, 5) 表示 1, 2, 3, 5 这四个数\nc(1:3, 5:6) 表示 1, 2, 3, 5, 6 这五个数\nc(1.23, pi, exp(1), sqrt(2)) 表示 1.23, \\(\\pi\\), \\(e\\), \\(\\sqrt{2}\\) 这四个数\n\n不过，只有整数能用来选变量哦\n\n\nc() 是一个独立存在的底层函数，表示向量，它不属于 tidyselect 的一部分。但是，可以借用它来同时选取多个变量。\n\nc(1, 3:5)\n\n[1] 1 3 4 5\n\n# 选取第1、3、4、5个变量\ndiamonds %&gt;%\n  select(c(1, 3:5))\n\n# A tibble: 53,940 × 4\n   carat color clarity depth\n   &lt;dbl&gt; &lt;ord&gt; &lt;ord&gt;   &lt;dbl&gt;\n 1  0.23 E     SI2      61.5\n 2  0.21 E     SI1      59.8\n 3  0.23 E     VS1      56.9\n 4  0.29 I     VS2      62.4\n 5  0.31 J     SI2      63.3\n 6  0.24 J     VVS2     62.8\n 7  0.24 I     VVS1     62.3\n 8  0.26 H     SI1      61.9\n 9  0.22 E     VS2      65.1\n10  0.23 H     VS1      59.4\n# ℹ 53,930 more rows\n\n# 用另一种方式选取这些变量\ndiamonds %&gt;%\n  select(c(carat, color:depth))\n\n# A tibble: 53,940 × 4\n   carat color clarity depth\n   &lt;dbl&gt; &lt;ord&gt; &lt;ord&gt;   &lt;dbl&gt;\n 1  0.23 E     SI2      61.5\n 2  0.21 E     SI1      59.8\n 3  0.23 E     VS1      56.9\n 4  0.29 I     VS2      62.4\n 5  0.31 J     SI2      63.3\n 6  0.24 J     VVS2     62.8\n 7  0.24 I     VVS1     62.3\n 8  0.26 H     SI1      61.9\n 9  0.22 E     VS2      65.1\n10  0.23 H     VS1      59.4\n# ℹ 53,930 more rows"
  }
]