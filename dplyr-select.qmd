---
title: dplyr 选取或删除
theme: united
lang: zh
toc: true
toc-depth: 3
toc-expand: 2
toc-title: 本页目录
number-sections: true
---

我删除了你的微信，本质上是保留了除了你以外所有人的微信。所以删除的本质就是选取。因此，在tidyverse里面，选取函数兼具了“保留”（选取）和“删除”的功能。

-   列命令（选变量）
    -   `select()` 根据[**位置**]{style="color:darkred"}或[**名称**]{style="color:darkred"}选取列（tidyselect）
    -   `pull()` 根据位置或名称抽取一列，输出[**矢量**]{style="color:darkred"}格式[（进阶技巧）]{style="color:gray"}
-   行命令（选个案）
    -   `head()` 和 `tail()` 抽取数据的[**开头**]{style="color:darkred"}或[**结尾**]{style="color: darkred"}几行
    -   `slice()` 根据[**位置**]{style="color:darkred"}抽取行
    -   `filter()` 根据[**变量取值**]{style="color:darkred"}抽取行
    -   `slice_sample` [**随机**]{style="color:darkred"}抽取若干行[（进阶技巧）]{style="color:gray"}
    -   `slice_headtail()` 和 `slice_interval()` 根据位置抽取特定行
    -   `distinct()` 去重，保留[**不重复**]{style="color:darkred"}的个案[（进阶技巧）]{style="color:gray"}

## `head()` 和 `tail()`

```{r}
#| code-fold: false
#| warning: false

diamonds %>%
  head() # 抽取前六条

diamonds %>%
  tail() # 抽取后六条
```

## `slice()`

比起 `head()` 和 `tail()`，`slice()` 的语法要更复杂、更灵活一点。和 `select()` 类似，`slice()` 可以选取任意位置的若干行，再重新拼接起来，因此要列明所有行号。

```{r}
#| code-fold: false
#| warning: false

diamonds %>%
  slice(5) # 抽取第五条
diamonds %>%
  slice(1:5) # 抽取前五条
diamonds %>%
  slice(-5) # 删除第五条

diamonds %>%
  slice_headtail()
diamonds %>%
  slice_interval()
```

## `filter()`

或许你还记得 `arrange()` 函数的讨论。我们说到变量具有统计能力，所以我们可以对单个变量排序，表现为改变个案顺序。同理，我们也可以对变量做判断，表现为筛选个案。

比方说，我们可以判断钻石的价格有没有低于 1000，且只保留那些 1000 以内的钻石。

```{r}
#| code-fold: false
#| warning: false

diamonds %>%
  filter(price < 1000) # 仅筛选$1000以内的钻石
```

我们也可以判断钻石的净度是不是等于 VVS2，且只保留判断成立的钻石。

```{r}
diamonds %>%
  filter(clarity == "VVS2") # 仅筛选VVS2级净度的钻石
```
