{
  "hash": "c197264220dbacddb9f3ff605907a70b",
  "result": {
    "markdown": "---\ntheme: united\nlang: zh\ntoc: true\ntoc-depth: 3\ntoc-expand: 2\ntoc-title: 本页目录\nnumber-sections: true\n---\n\n\n\n# dplyr 排序\n\n在 tidyverse 中，dplyr 是清理数据的最重要的包。下面，我将从最简单的排序函数开始介绍。\n\n我们通常需要手动排序变量。而在排序个案时，因为变量具有算术性，所以我们可以根据某个（或某些）变量的取值，对个案进行快速排序。\n\n-   排序列（变量）\n    -   `relocate()` 把变量[**手动**]{style=\"color:darkred\"}挪到开头\n        -   `.before` 和 `.after` [**精确地**]{style=\"color:darkred\"}把变量挪到某个位置\n-   排序行（个案）\n    -   `arrange()` 根据[**变量取值**]{style=\"color:darkred\"}排序个案\n\n## `relocate()`\n\n让我们回到前面摘出来的示例数据。\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\nlibrary(tidyverse)\n\ndiamonds # 示例数据\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 53,940 x 10\n   carat cut       color clarity depth table price     x     y     z\n   <dbl> <ord>     <ord> <ord>   <dbl> <dbl> <int> <dbl> <dbl> <dbl>\n 1  0.23 Ideal     E     SI2      61.5    55   326  3.95  3.98  2.43\n 2  0.21 Premium   E     SI1      59.8    61   326  3.89  3.84  2.31\n 3  0.23 Good      E     VS1      56.9    65   327  4.05  4.07  2.31\n 4  0.29 Premium   I     VS2      62.4    58   334  4.2   4.23  2.63\n 5  0.31 Good      J     SI2      63.3    58   335  4.34  4.35  2.75\n 6  0.24 Very Good J     VVS2     62.8    57   336  3.94  3.96  2.48\n 7  0.24 Very Good I     VVS1     62.3    57   336  3.95  3.98  2.47\n 8  0.26 Very Good H     SI1      61.9    55   337  4.07  4.11  2.53\n 9  0.22 Fair      E     VS2      65.1    61   337  3.87  3.78  2.49\n10  0.23 Very Good H     VS1      59.4    61   338  4     4.05  2.39\n# i 53,930 more rows\n```\n:::\n:::\n\n\n\n接下来，我将运行一些 `relocate()` 函数的示例，请特别关注列的顺序变化。\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\nrelocate(diamonds, price) # 把price变量提到最前，其余顺序不变\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 53,940 x 10\n   price carat cut       color clarity depth table     x     y     z\n   <int> <dbl> <ord>     <ord> <ord>   <dbl> <dbl> <dbl> <dbl> <dbl>\n 1   326  0.23 Ideal     E     SI2      61.5    55  3.95  3.98  2.43\n 2   326  0.21 Premium   E     SI1      59.8    61  3.89  3.84  2.31\n 3   327  0.23 Good      E     VS1      56.9    65  4.05  4.07  2.31\n 4   334  0.29 Premium   I     VS2      62.4    58  4.2   4.23  2.63\n 5   335  0.31 Good      J     SI2      63.3    58  4.34  4.35  2.75\n 6   336  0.24 Very Good J     VVS2     62.8    57  3.94  3.96  2.48\n 7   336  0.24 Very Good I     VVS1     62.3    57  3.95  3.98  2.47\n 8   337  0.26 Very Good H     SI1      61.9    55  4.07  4.11  2.53\n 9   337  0.22 Fair      E     VS2      65.1    61  3.87  3.78  2.49\n10   338  0.23 Very Good H     VS1      59.4    61  4     4.05  2.39\n# i 53,930 more rows\n```\n:::\n\n```{.r .cell-code  code-fold=\"false\"}\n# 使用管道函数，重写上一行代码（结果不会变）\n# 当函数多了以后，这会让代码更加干净、整洁\ndiamonds %>% \n  relocate(price)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 53,940 x 10\n   price carat cut       color clarity depth table     x     y     z\n   <int> <dbl> <ord>     <ord> <ord>   <dbl> <dbl> <dbl> <dbl> <dbl>\n 1   326  0.23 Ideal     E     SI2      61.5    55  3.95  3.98  2.43\n 2   326  0.21 Premium   E     SI1      59.8    61  3.89  3.84  2.31\n 3   327  0.23 Good      E     VS1      56.9    65  4.05  4.07  2.31\n 4   334  0.29 Premium   I     VS2      62.4    58  4.2   4.23  2.63\n 5   335  0.31 Good      J     SI2      63.3    58  4.34  4.35  2.75\n 6   336  0.24 Very Good J     VVS2     62.8    57  3.94  3.96  2.48\n 7   336  0.24 Very Good I     VVS1     62.3    57  3.95  3.98  2.47\n 8   337  0.26 Very Good H     SI1      61.9    55  4.07  4.11  2.53\n 9   337  0.22 Fair      E     VS2      65.1    61  3.87  3.78  2.49\n10   338  0.23 Very Good H     VS1      59.4    61  4     4.05  2.39\n# i 53,930 more rows\n```\n:::\n:::\n\n\n\n## `.before` 和 `.after`\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\nrelocate(diamonds, price, .before = cut) # 把price提到cut之前，其余顺序不变\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 53,940 x 10\n   carat price cut       color clarity depth table     x     y     z\n   <dbl> <int> <ord>     <ord> <ord>   <dbl> <dbl> <dbl> <dbl> <dbl>\n 1  0.23   326 Ideal     E     SI2      61.5    55  3.95  3.98  2.43\n 2  0.21   326 Premium   E     SI1      59.8    61  3.89  3.84  2.31\n 3  0.23   327 Good      E     VS1      56.9    65  4.05  4.07  2.31\n 4  0.29   334 Premium   I     VS2      62.4    58  4.2   4.23  2.63\n 5  0.31   335 Good      J     SI2      63.3    58  4.34  4.35  2.75\n 6  0.24   336 Very Good J     VVS2     62.8    57  3.94  3.96  2.48\n 7  0.24   336 Very Good I     VVS1     62.3    57  3.95  3.98  2.47\n 8  0.26   337 Very Good H     SI1      61.9    55  4.07  4.11  2.53\n 9  0.22   337 Fair      E     VS2      65.1    61  3.87  3.78  2.49\n10  0.23   338 Very Good H     VS1      59.4    61  4     4.05  2.39\n# i 53,930 more rows\n```\n:::\n\n```{.r .cell-code  code-fold=\"false\"}\nrelocate(diamonds, price, .after = cut) # 把price提到cut之后，其余顺序不变\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 53,940 x 10\n   carat cut       price color clarity depth table     x     y     z\n   <dbl> <ord>     <int> <ord> <ord>   <dbl> <dbl> <dbl> <dbl> <dbl>\n 1  0.23 Ideal       326 E     SI2      61.5    55  3.95  3.98  2.43\n 2  0.21 Premium     326 E     SI1      59.8    61  3.89  3.84  2.31\n 3  0.23 Good        327 E     VS1      56.9    65  4.05  4.07  2.31\n 4  0.29 Premium     334 I     VS2      62.4    58  4.2   4.23  2.63\n 5  0.31 Good        335 J     SI2      63.3    58  4.34  4.35  2.75\n 6  0.24 Very Good   336 J     VVS2     62.8    57  3.94  3.96  2.48\n 7  0.24 Very Good   336 I     VVS1     62.3    57  3.95  3.98  2.47\n 8  0.26 Very Good   337 H     SI1      61.9    55  4.07  4.11  2.53\n 9  0.22 Fair        337 E     VS2      65.1    61  3.87  3.78  2.49\n10  0.23 Very Good   338 H     VS1      59.4    61  4     4.05  2.39\n# i 53,930 more rows\n```\n:::\n\n```{.r .cell-code  code-fold=\"false\"}\n# 使用管道函数，重写上一行代码（结果不会变）\n# 当函数多了以后，这会让代码更加干净、整洁\ndiamonds %>% \n  relocate(price, .after = cut)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 53,940 x 10\n   carat cut       price color clarity depth table     x     y     z\n   <dbl> <ord>     <int> <ord> <ord>   <dbl> <dbl> <dbl> <dbl> <dbl>\n 1  0.23 Ideal       326 E     SI2      61.5    55  3.95  3.98  2.43\n 2  0.21 Premium     326 E     SI1      59.8    61  3.89  3.84  2.31\n 3  0.23 Good        327 E     VS1      56.9    65  4.05  4.07  2.31\n 4  0.29 Premium     334 I     VS2      62.4    58  4.2   4.23  2.63\n 5  0.31 Good        335 J     SI2      63.3    58  4.34  4.35  2.75\n 6  0.24 Very Good   336 J     VVS2     62.8    57  3.94  3.96  2.48\n 7  0.24 Very Good   336 I     VVS1     62.3    57  3.95  3.98  2.47\n 8  0.26 Very Good   337 H     SI1      61.9    55  4.07  4.11  2.53\n 9  0.22 Fair        337 E     VS2      65.1    61  3.87  3.78  2.49\n10  0.23 Very Good   338 H     VS1      59.4    61  4     4.05  2.39\n# i 53,930 more rows\n```\n:::\n:::\n\n\n\n## `arrange()`\n\n在统计中，我们很少改变变量的顺序，因为变量的顺序不会影响统计分析的结果。\n\n::: callout-caution\n## 注意\n\n我们通常不会对数据做任何手动的改变\n:::\n\n但是，我们常常对个案排序，就像Excel里的升序、降序那样。要怎么理解，我们明明是对个案排序，却借助了变量呢？\n\n-   在小学里，根据学号[*（变量）*]{style=\"color:gray\"}排序，变的是小学生[*（个案）*]{style=\"color:gray\"}的顺序。\n-   在12306买票时，根据列车发车时间[*（变量）*]{style=\"color:gray\"}排序，变的是列车[*（个案）*]{style=\"color:gray\"}的顺序。\n-   在网购时，根据商品价格[*（变量）*]{style=\"color:gray\"}排序，变的是商品[*（个案）*]{style=\"color:gray\"}的顺序。\n\n::: callout-important\n## 重要\n\n变量的每个值都是一条个案，所以对单个变量排序的本质是对个案排序！\n:::\n\n这里我们借助了变量的统计能力（算术性）。反过来说，因为个案不具备统计能力，所以我们无法对变量做类似的排序，只能手动调整它们的位置了。\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\narrange(diamonds, price) # 根据price变量升序（从低到高）\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 53,940 x 10\n   carat cut       color clarity depth table price     x     y     z\n   <dbl> <ord>     <ord> <ord>   <dbl> <dbl> <int> <dbl> <dbl> <dbl>\n 1  0.23 Ideal     E     SI2      61.5    55   326  3.95  3.98  2.43\n 2  0.21 Premium   E     SI1      59.8    61   326  3.89  3.84  2.31\n 3  0.23 Good      E     VS1      56.9    65   327  4.05  4.07  2.31\n 4  0.29 Premium   I     VS2      62.4    58   334  4.2   4.23  2.63\n 5  0.31 Good      J     SI2      63.3    58   335  4.34  4.35  2.75\n 6  0.24 Very Good J     VVS2     62.8    57   336  3.94  3.96  2.48\n 7  0.24 Very Good I     VVS1     62.3    57   336  3.95  3.98  2.47\n 8  0.26 Very Good H     SI1      61.9    55   337  4.07  4.11  2.53\n 9  0.22 Fair      E     VS2      65.1    61   337  3.87  3.78  2.49\n10  0.23 Very Good H     VS1      59.4    61   338  4     4.05  2.39\n# i 53,930 more rows\n```\n:::\n\n```{.r .cell-code  code-fold=\"false\"}\narrange(diamonds, -price) # 根据price变量降序（从高到低）\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 53,940 x 10\n   carat cut       color clarity depth table price     x     y     z\n   <dbl> <ord>     <ord> <ord>   <dbl> <dbl> <int> <dbl> <dbl> <dbl>\n 1  2.29 Premium   I     VS2      60.8    60 18823  8.5   8.47  5.16\n 2  2    Very Good G     SI1      63.5    56 18818  7.9   7.97  5.04\n 3  1.51 Ideal     G     IF       61.7    55 18806  7.37  7.41  4.56\n 4  2.07 Ideal     G     SI2      62.5    55 18804  8.2   8.13  5.11\n 5  2    Very Good H     SI1      62.8    57 18803  7.95  8     5.01\n 6  2.29 Premium   I     SI1      61.8    59 18797  8.52  8.45  5.24\n 7  2.04 Premium   H     SI1      58.1    60 18795  8.37  8.28  4.84\n 8  2    Premium   I     VS1      60.8    59 18795  8.13  8.02  4.91\n 9  1.71 Premium   F     VS2      62.3    59 18791  7.57  7.53  4.7 \n10  2.15 Ideal     G     SI2      62.6    54 18791  8.29  8.35  5.21\n# i 53,930 more rows\n```\n:::\n\n```{.r .cell-code  code-fold=\"false\"}\n# 使用管道函数，重写上一行代码（结果不会变）\n# 当函数多了以后，这会让代码更加干净、整洁\ndiamonds %>%\n  arrange(-price)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 53,940 x 10\n   carat cut       color clarity depth table price     x     y     z\n   <dbl> <ord>     <ord> <ord>   <dbl> <dbl> <int> <dbl> <dbl> <dbl>\n 1  2.29 Premium   I     VS2      60.8    60 18823  8.5   8.47  5.16\n 2  2    Very Good G     SI1      63.5    56 18818  7.9   7.97  5.04\n 3  1.51 Ideal     G     IF       61.7    55 18806  7.37  7.41  4.56\n 4  2.07 Ideal     G     SI2      62.5    55 18804  8.2   8.13  5.11\n 5  2    Very Good H     SI1      62.8    57 18803  7.95  8     5.01\n 6  2.29 Premium   I     SI1      61.8    59 18797  8.52  8.45  5.24\n 7  2.04 Premium   H     SI1      58.1    60 18795  8.37  8.28  4.84\n 8  2    Premium   I     VS1      60.8    59 18795  8.13  8.02  4.91\n 9  1.71 Premium   F     VS2      62.3    59 18791  7.57  7.53  4.7 \n10  2.15 Ideal     G     SI2      62.6    54 18791  8.29  8.35  5.21\n# i 53,930 more rows\n```\n:::\n:::\n\n\n\n## 再议 `%>%`\n\n::: callout-warning\n## 警告\n\n从下一章开始，为了帮助大家养成习惯，我会把所有的函数都写成管道 `%>%` 的形式。\n:::\n\n在实际的数据分析中，90%以上的函数会和管道一起出现。请看下面的例子：\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# 任务：先把 clarity 放到 cut 之前，再对 price 降序排列（从高到低）\n\n# 【错误】不使用管道：混乱\narrange(relocate(diamonds, clarity, .before = cut), -price)\n\n# 【错误】不使用管道：分了行，依然混乱\narrange(\n  relocate(\n    diamonds, \n    clarity, .before = cut\n  ), \n  -price\n)\n\n# 【正确】使用管道：整洁、清晰、易读\ndiamonds %>%\n  relocate(clarity, .before = cut) %>%\n  arrange(-price)\n```\n:::\n\n\n\n可以看到，短短三行，两个函数，我们就用到了两根管道 `%>%`。事实上，如果用到10个函数，我们就要在它们的前面搭配10根管道才行。\n\n所以说，管道函数的确可能把简单的函数复杂化，但是一旦真正开始清理数据，`%>%` 就像是脊骨一样，绝对不能被抽掉的。\n",
    "supporting": ["dplyr-sort_files"],
    "filters": ["rmarkdown/pagebreak.lua"],
    "includes": {},
    "engineDependencies": {
      "knitr": ["{\"type\":\"list\",\"attributes\":{},\"value\":[]}"]
    },
    "preserve": null,
    "postProcess": false
  }
}
