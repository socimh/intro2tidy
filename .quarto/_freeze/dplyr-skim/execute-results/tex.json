{
  "hash": "9568a4aa8ae5642cfb42085e2b5ab046",
  "result": {
    "markdown": "---\ntheme: united\nlang: zh\ntoc: true\ntoc-depth: 3\ntoc-expand: 2\ntoc-title: 本页目录\nnumber-sections: true\n---\n\n\n\n# dplyr 浏览\n\n-   浏览数据\n    -   `print()` 展示数据的[**前面几列**]{style=\"color:darkred\"}、前面几行\n    -   `s_print()` 展示数据的前面几列、[**首尾几行**]{style=\"color:darkred\"}\n    -   `glimpse()` 展示数据[**每一列**]{style=\"color:darkred\"}的前面几行\n    -   `view()` 打开类似 Excel 的界面，查看[**整个数据**]{style=\"color:darkred\"}的表格\n-   浏览变量\n    -   `names()` 和 `names_as_column()` 浏览变量名\n    -   `codebook()` 查看变量标签和概要\n\n## `print()`\n\n当你键入一个对象，而不对它进行任何操作时，R 会自动帮你套上一个 `print()` 函数。请看下面的例子：\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\n1 + 1\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 2\n```\n:::\n\n```{.r .cell-code  code-fold=\"false\"}\nprint(1 + 1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 2\n```\n:::\n:::\n\n\n\n同理，我们阅读 diamonds 的时候，其实是看它打印出来的样子：\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\nlibrary(tidyverse)\n\ndiamonds\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 53,940 x 10\n   carat cut       color clarity depth table price     x     y     z\n   <dbl> <ord>     <ord> <ord>   <dbl> <dbl> <int> <dbl> <dbl> <dbl>\n 1  0.23 Ideal     E     SI2      61.5    55   326  3.95  3.98  2.43\n 2  0.21 Premium   E     SI1      59.8    61   326  3.89  3.84  2.31\n 3  0.23 Good      E     VS1      56.9    65   327  4.05  4.07  2.31\n 4  0.29 Premium   I     VS2      62.4    58   334  4.2   4.23  2.63\n 5  0.31 Good      J     SI2      63.3    58   335  4.34  4.35  2.75\n 6  0.24 Very Good J     VVS2     62.8    57   336  3.94  3.96  2.48\n 7  0.24 Very Good I     VVS1     62.3    57   336  3.95  3.98  2.47\n 8  0.26 Very Good H     SI1      61.9    55   337  4.07  4.11  2.53\n 9  0.22 Fair      E     VS2      65.1    61   337  3.87  3.78  2.49\n10  0.23 Very Good H     VS1      59.4    61   338  4     4.05  2.39\n# i 53,930 more rows\n```\n:::\n\n```{.r .cell-code  code-fold=\"false\"}\nprint(diamonds)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 53,940 x 10\n   carat cut       color clarity depth table price     x     y     z\n   <dbl> <ord>     <ord> <ord>   <dbl> <dbl> <int> <dbl> <dbl> <dbl>\n 1  0.23 Ideal     E     SI2      61.5    55   326  3.95  3.98  2.43\n 2  0.21 Premium   E     SI1      59.8    61   326  3.89  3.84  2.31\n 3  0.23 Good      E     VS1      56.9    65   327  4.05  4.07  2.31\n 4  0.29 Premium   I     VS2      62.4    58   334  4.2   4.23  2.63\n 5  0.31 Good      J     SI2      63.3    58   335  4.34  4.35  2.75\n 6  0.24 Very Good J     VVS2     62.8    57   336  3.94  3.96  2.48\n 7  0.24 Very Good I     VVS1     62.3    57   336  3.95  3.98  2.47\n 8  0.26 Very Good H     SI1      61.9    55   337  4.07  4.11  2.53\n 9  0.22 Fair      E     VS2      65.1    61   337  3.87  3.78  2.49\n10  0.23 Very Good H     VS1      59.4    61   338  4     4.05  2.39\n# i 53,930 more rows\n```\n:::\n:::\n\n\n\n所以，我们通常不会主动使用 `print()`。但是，我们在很多时候用到了这个函数。\n\n我们还可以用 statart 包的 `sprint()` 函数，它可以打印一个数据的开头几行和结尾几行：\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\nlibrary(statart)\n\ns_print(diamonds)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 53,940 × 10\n      carat cut       color clarity depth table price     x     y     z\n      <dbl> <ord>     <ord> <ord>   <dbl> <dbl> <int> <dbl> <dbl> <dbl>\n    1  0.23 Ideal     E     SI2      61.5    55   326  3.95  3.98  2.43\n    2  0.21 Premium   E     SI1      59.8    61   326  3.89  3.84  2.31\n    3  0.23 Good      E     VS1      56.9    65   327  4.05  4.07  2.31\n    4  0.29 Premium   I     VS2      62.4    58   334  4.2   4.23  2.63\n    5  0.31 Good      J     SI2      63.3    58   335  4.34  4.35  2.75\n53936  0.72 Ideal     D     SI1      60.8    57  2757  5.75  5.76  3.5 \n53937  0.72 Good      D     SI1      63.1    55  2757  5.69  5.75  3.61\n53938  0.7  Very Good D     SI1      62.8    60  2757  5.66  5.68  3.56\n53939  0.86 Premium   H     SI2      61      58  2757  6.15  6.12  3.74\n53940  0.75 Ideal     D     SI2      62.2    55  2757  5.83  5.87  3.64\n# ℹ 53,930 more rows in the middle\n# ℹ Use `s_print(n = ...)` to see more rows\n```\n:::\n\n```{.r .cell-code  code-fold=\"false\"}\ns_print(diamonds, n = 10)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 53,940 × 10\n      carat cut       color clarity depth table price     x     y     z\n      <dbl> <ord>     <ord> <ord>   <dbl> <dbl> <int> <dbl> <dbl> <dbl>\n    1  0.23 Ideal     E     SI2      61.5    55   326  3.95  3.98  2.43\n    2  0.21 Premium   E     SI1      59.8    61   326  3.89  3.84  2.31\n    3  0.23 Good      E     VS1      56.9    65   327  4.05  4.07  2.31\n    4  0.29 Premium   I     VS2      62.4    58   334  4.2   4.23  2.63\n    5  0.31 Good      J     SI2      63.3    58   335  4.34  4.35  2.75\n53936  0.72 Ideal     D     SI1      60.8    57  2757  5.75  5.76  3.5 \n53937  0.72 Good      D     SI1      63.1    55  2757  5.69  5.75  3.61\n53938  0.7  Very Good D     SI1      62.8    60  2757  5.66  5.68  3.56\n53939  0.86 Premium   H     SI2      61      58  2757  6.15  6.12  3.74\n53940  0.75 Ideal     D     SI2      62.2    55  2757  5.83  5.87  3.64\n# ℹ 53,930 more rows in the middle\n# ℹ Use `s_print(n = ...)` to see more rows\n```\n:::\n:::\n\n\n\n## `names()`\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\nlibrary(tidyverse)\n\n# 罗列变量名\nnames(diamonds)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] \"carat\"   \"cut\"     \"color\"   \"clarity\" \"depth\"   \"table\"   \"price\"  \n [8] \"x\"       \"y\"       \"z\"      \n```\n:::\n:::\n\n\n\n## `glimpse()`\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\n# 浏览变量列表，以及开头的若干个案\nglimpse(diamonds)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 53,940\nColumns: 10\n$ carat   <dbl> 0.23, 0.21, 0.23, 0.29, 0.31, 0.24, 0.24, 0.26, 0.22, 0.23, 0.~\n$ cut     <ord> Ideal, Premium, Good, Premium, Good, Very Good, Very Good, Ver~\n$ color   <ord> E, E, E, I, J, J, I, H, E, H, J, J, F, J, E, E, I, J, J, J, I,~\n$ clarity <ord> SI2, SI1, VS1, VS2, SI2, VVS2, VVS1, SI1, VS2, VS1, SI1, VS1, ~\n$ depth   <dbl> 61.5, 59.8, 56.9, 62.4, 63.3, 62.8, 62.3, 61.9, 65.1, 59.4, 64~\n$ table   <dbl> 55, 61, 65, 58, 58, 57, 57, 55, 61, 61, 55, 56, 61, 54, 62, 58~\n$ price   <int> 326, 326, 327, 334, 335, 336, 336, 337, 337, 338, 339, 340, 34~\n$ x       <dbl> 3.95, 3.89, 4.05, 4.20, 4.34, 3.94, 3.95, 4.07, 3.87, 4.00, 4.~\n$ y       <dbl> 3.98, 3.84, 4.07, 4.23, 4.35, 3.96, 3.98, 4.11, 3.78, 4.05, 4.~\n$ z       <dbl> 2.43, 2.31, 2.31, 2.63, 2.75, 2.48, 2.47, 2.53, 2.49, 2.39, 2.~\n```\n:::\n:::\n\n\n\n## `view()`\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\n# 打开 Excel 式的数据表\nview(diamonds)\n```\n:::\n\n\n\n这里因为条件的限制无法演示，就在下面贴一些截图吧。大家可以在自己的 RStudio 里面运行代码，尝试一下。\n\n![打开 viewer 界面](fig/view1.png){#fig-view1}\n\n![搜索 “1000”](fig/view2.png){#fig-view2}\n\n![根据 price 降序](fig/view3.png){#fig-view3}\n\n\n## `codebook()`\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\nlibrary(statart)\n\n# 查看变量基本信息\ncodebook(diamonds)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 10 x 4\n   variable type        n unique\n   <chr>    <chr>   <int>  <int>\n 1 carat    double  53940    273\n 2 cut      ordered 53940      5\n 3 color    ordered 53940      7\n 4 clarity  ordered 53940      8\n 5 depth    double  53940    184\n 6 table    double  53940    127\n 7 price    integer 53940  11602\n 8 x        double  53940    554\n 9 y        double  53940    552\n10 z        double  53940    375\n```\n:::\n:::\n",
    "supporting": [
      "dplyr-skim_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {
      "knitr": [
        "{\"type\":\"list\",\"attributes\":{},\"value\":[]}"
      ]
    },
    "preserve": null,
    "postProcess": false
  }
}