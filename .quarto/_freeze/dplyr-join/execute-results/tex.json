{
  "hash": "2babc45de0fb93b44b95b10625ffe0db",
  "result": {
    "markdown": "---\ntheme: united\nlang: zh\ntoc: true\ntoc-depth: 3\ntoc-expand: 2\ntoc-title: 本页目录\nnumber-sections: true\n---\n\n\n\n# dplyr 合并\n\n匹配的本质是扩充数据。假设我们有一个班级学生的花名册，同时我们得到了这批学生期中成绩的整洁数据。我们可以选择根据期中成绩的数据，逐一输入花名册里；也可以选择通过匹配的方式，快速在学生的花名册中生成“期中成绩”这个新的变量。\n\n当多个 dplyr 函数组合时，我默认会使用管道函数 `%>%`。下面是一个例子：\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\nlibrary(tidyverse)\n\n# 先把 price 放到开头，再对它降序排列（从高到低）\ndiamonds %>%\n  relocate(price) %>%\n  arrange(-price)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 53,940 x 10\n   price carat cut       color clarity depth table     x     y     z\n   <int> <dbl> <ord>     <ord> <ord>   <dbl> <dbl> <dbl> <dbl> <dbl>\n 1 18823  2.29 Premium   I     VS2      60.8    60  8.5   8.47  5.16\n 2 18818  2    Very Good G     SI1      63.5    56  7.9   7.97  5.04\n 3 18806  1.51 Ideal     G     IF       61.7    55  7.37  7.41  4.56\n 4 18804  2.07 Ideal     G     SI2      62.5    55  8.2   8.13  5.11\n 5 18803  2    Very Good H     SI1      62.8    57  7.95  8     5.01\n 6 18797  2.29 Premium   I     SI1      61.8    59  8.52  8.45  5.24\n 7 18795  2.04 Premium   H     SI1      58.1    60  8.37  8.28  4.84\n 8 18795  2    Premium   I     VS1      60.8    59  8.13  8.02  4.91\n 9 18791  1.71 Premium   F     VS2      62.3    59  7.57  7.53  4.7 \n10 18791  2.15 Ideal     G     SI2      62.6    54  8.29  8.35  5.21\n# i 53,930 more rows\n```\n:::\n:::\n\n\n\n当然，`relocate()` 和 `arrange()` 都有一些更高级的应用，比方说对多个变量排序、根据多个变量的取值排序等。这些就留待进阶部分再详细讲解了。\n",
    "supporting": ["dplyr-join_files"],
    "filters": ["rmarkdown/pagebreak.lua"],
    "includes": {},
    "engineDependencies": {
      "knitr": ["{\"type\":\"list\",\"attributes\":{},\"value\":[]}"]
    },
    "preserve": null,
    "postProcess": false
  }
}
