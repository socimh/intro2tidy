{
  "hash": "2239a9371399bdfb0a48e39339109eed",
  "result": {
    "markdown": "---\ntheme: united\nlang: zh\ntoc: true\ntoc-depth: 3\ntoc-expand: 2\ntoc-title: 本页目录\nnumber-sections: true\n---\n\n\n# dplyr 分组\n\n分组可以做很多事情，但最常用的，肯定还是分组统计。\n\n-   `.by` 在函数中分组\n    -   `summarise(..., .by)` 统计[**个别**]{style=\"color:darkred\"}统计量\n    -   `summ(..., .by)` 快速生成[**大量**]{style=\"color:darkred\"}变量的[**多个**]{style=\"color:darkred\"}统计量\n    -   `mutate(..., .by)` 根据分组统计量更改或新建变量\n-   `group_by()` 在函数前构造分组数据\n-   `ungroup()` 取消数据分组\n\n\n::: {.cell}\n\n:::\n\n\n## `summarise(..., .by)`\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: package 'ggplot2' was built under R version 4.3.3\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: package 'stringr' was built under R version 4.3.2\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.2     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.2     ✔ tidyr     1.3.0\n✔ purrr     1.0.1     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n```\n:::\n\n```{.r .cell-code  code-fold=\"false\"}\ndiamonds %>%\n  summarise(\n    price = mean(price),\n    .by = clarity\n  )\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 8 × 2\n  clarity price\n  <ord>   <dbl>\n1 SI2     5063.\n2 SI1     3996.\n3 VS1     3839.\n4 VS2     3925.\n5 VVS2    3284.\n6 VVS1    2523.\n7 I1      3924.\n8 IF      2865.\n```\n:::\n\n```{.r .cell-code  code-fold=\"false\"}\ndiamonds %>%\n  summarise(\n    price = mean(price),\n    .by = c(cut, clarity)\n  )\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 40 × 3\n   cut       clarity price\n   <ord>     <ord>   <dbl>\n 1 Ideal     SI2     4756.\n 2 Premium   SI1     4455.\n 3 Good      VS1     3801.\n 4 Premium   VS2     4550.\n 5 Good      SI2     4580.\n 6 Very Good VVS2    3038.\n 7 Very Good VVS1    2459.\n 8 Very Good SI1     3932.\n 9 Fair      VS2     4175.\n10 Very Good VS1     3805.\n# ℹ 30 more rows\n```\n:::\n:::\n\n\n## `summ(..., .by)`\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\ndiamonds %>%\n  summ(price, .by = clarity)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 8 × 9\n  clarity variable type      n unique  mean    sd   min   max\n  <ord>   <chr>    <chr> <int>  <int> <dbl> <dbl> <int> <int>\n1 SI2     price    int    9194   4904 5063. 4260.   326 18804\n2 SI1     price    int   13065   5380 3996. 3799.   326 18818\n3 VS1     price    int    8171   3926 3839. 4012.   327 18795\n4 VS2     price    int   12258   5051 3925. 4042.   334 18823\n5 VVS2    price    int    5066   2409 3284. 3822.   336 18768\n6 VVS1    price    int    3655   1623 2523. 3335.   336 18777\n7 I1      price    int     741    632 3924. 2807.   345 18531\n8 IF      price    int    1790    902 2865. 3920.   369 18806\n```\n:::\n\n```{.r .cell-code  code-fold=\"false\"}\ndiamonds %>%\n  summ(price, .by = c(cut, clarity))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 40 × 10\n   cut       clarity variable type      n unique  mean    sd   min   max\n   <ord>     <ord>   <chr>    <chr> <int>  <int> <dbl> <dbl> <int> <int>\n 1 Ideal     SI2     price    int    2598   1922 4756. 4252.   326 18804\n 2 Premium   SI1     price    int    3575   2107 4455. 4071.   326 18797\n 3 Good      VS1     price    int     648    548 3801. 3703.   327 18340\n 4 Premium   VS2     price    int    3357   1868 4550. 4457.   334 18823\n 5 Good      SI2     price    int    1081    880 4580. 3901.   335 18788\n 6 Very Good VVS2    price    int    1235    791 3038. 3768.   336 18211\n 7 Very Good VVS1    price    int     789    511 2459. 3317.   336 18777\n 8 Very Good SI1     price    int    3240   2107 3932. 3708.   337 18818\n 9 Fair      VS2     price    int     261    240 4175. 3532.   337 18565\n10 Very Good VS1     price    int    1775   1304 3805. 3864.   338 18500\n# ℹ 30 more rows\n```\n:::\n\n```{.r .cell-code  code-fold=\"false\"}\ndiamonds %>%\n  summ(x:z, .by = clarity)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 24 × 9\n   clarity variable type      n unique  mean    sd   min   max\n   <ord>   <chr>    <chr> <int>  <int> <dbl> <dbl> <dbl> <dbl>\n 1 SI2     x        dbl    9194    492  6.40 1.06   0     9.51\n 2 SI2     y        dbl    9194    490  6.40 1.18   0    58.9 \n 3 SI2     z        dbl    9194    320  3.95 0.660  0     8.06\n 4 SI1     x        dbl   13065    480  5.89 1.04   3.88  8.9 \n 5 SI1     y        dbl   13065    471  5.89 1.04   3.84  8.87\n 6 SI1     z        dbl   13065    301  3.64 0.645  0     5.49\n 7 VS1     x        dbl    8171    466  5.57 1.06   0     8.83\n 8 VS1     y        dbl    8171    456  5.58 1.10   0    31.8 \n 9 VS1     z        dbl    8171    297  3.44 0.725  0    31.8 \n10 VS2     x        dbl   12258    490  5.66 1.09   0     9.66\n# ℹ 14 more rows\n```\n:::\n:::\n\n\n## `mutate(..., .by)`\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndiamonds %>%\n  mutate(\n    price = mean(price),\n    .by = clarity\n  )\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 53,940 × 10\n   carat cut       color clarity depth table price     x     y     z\n   <dbl> <ord>     <ord> <ord>   <dbl> <dbl> <dbl> <dbl> <dbl> <dbl>\n 1  0.23 Ideal     E     SI2      61.5    55 5063.  3.95  3.98  2.43\n 2  0.21 Premium   E     SI1      59.8    61 3996.  3.89  3.84  2.31\n 3  0.23 Good      E     VS1      56.9    65 3839.  4.05  4.07  2.31\n 4  0.29 Premium   I     VS2      62.4    58 3925.  4.2   4.23  2.63\n 5  0.31 Good      J     SI2      63.3    58 5063.  4.34  4.35  2.75\n 6  0.24 Very Good J     VVS2     62.8    57 3284.  3.94  3.96  2.48\n 7  0.24 Very Good I     VVS1     62.3    57 2523.  3.95  3.98  2.47\n 8  0.26 Very Good H     SI1      61.9    55 3996.  4.07  4.11  2.53\n 9  0.22 Fair      E     VS2      65.1    61 3925.  3.87  3.78  2.49\n10  0.23 Very Good H     VS1      59.4    61 3839.  4     4.05  2.39\n# ℹ 53,930 more rows\n```\n:::\n\n```{.r .cell-code}\ndiamonds %>%\n  mutate(\n    mean_price = mean(price),\n    .by = clarity\n  )\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 53,940 × 11\n   carat cut       color clarity depth table price     x     y     z mean_price\n   <dbl> <ord>     <ord> <ord>   <dbl> <dbl> <int> <dbl> <dbl> <dbl>      <dbl>\n 1  0.23 Ideal     E     SI2      61.5    55   326  3.95  3.98  2.43      5063.\n 2  0.21 Premium   E     SI1      59.8    61   326  3.89  3.84  2.31      3996.\n 3  0.23 Good      E     VS1      56.9    65   327  4.05  4.07  2.31      3839.\n 4  0.29 Premium   I     VS2      62.4    58   334  4.2   4.23  2.63      3925.\n 5  0.31 Good      J     SI2      63.3    58   335  4.34  4.35  2.75      5063.\n 6  0.24 Very Good J     VVS2     62.8    57   336  3.94  3.96  2.48      3284.\n 7  0.24 Very Good I     VVS1     62.3    57   336  3.95  3.98  2.47      2523.\n 8  0.26 Very Good H     SI1      61.9    55   337  4.07  4.11  2.53      3996.\n 9  0.22 Fair      E     VS2      65.1    61   337  3.87  3.78  2.49      3925.\n10  0.23 Very Good H     VS1      59.4    61   338  4     4.05  2.39      3839.\n# ℹ 53,930 more rows\n```\n:::\n\n```{.r .cell-code}\ndiamonds %>%\n  mutate(\n    price3g = cut(price, 3),\n    .by = color\n  )\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 53,940 × 11\n   carat cut       color clarity depth table price     x     y     z price3g    \n   <dbl> <ord>     <ord> <ord>   <dbl> <dbl> <int> <dbl> <dbl> <dbl> <fct>      \n 1  0.23 Ideal     E     SI2      61.5    55   326  3.95  3.98  2.43 (308,6.46e…\n 2  0.21 Premium   E     SI1      59.8    61   326  3.89  3.84  2.31 (308,6.46e…\n 3  0.23 Good      E     VS1      56.9    65   327  4.05  4.07  2.31 (308,6.46e…\n 4  0.29 Premium   I     VS2      62.4    58   334  4.2   4.23  2.63 (316,6.5e+…\n 5  0.31 Good      J     SI2      63.3    58   335  4.34  4.35  2.75 (317,6.46e…\n 6  0.24 Very Good J     VVS2     62.8    57   336  3.94  3.96  2.48 (317,6.46e…\n 7  0.24 Very Good I     VVS1     62.3    57   336  3.95  3.98  2.47 (316,6.5e+…\n 8  0.26 Very Good H     SI1      61.9    55   337  4.07  4.11  2.53 (319,6.49e…\n 9  0.22 Fair      E     VS2      65.1    61   337  3.87  3.78  2.49 (308,6.46e…\n10  0.23 Very Good H     VS1      59.4    61   338  4     4.05  2.39 (319,6.49e…\n# ℹ 53,930 more rows\n```\n:::\n:::\n\n\n## `group_by()`\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\ndiamonds %>%\n  group_by(cut)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 53,940 × 10\n# Groups:   cut [5]\n   carat cut       color clarity depth table price     x     y     z\n   <dbl> <ord>     <ord> <ord>   <dbl> <dbl> <int> <dbl> <dbl> <dbl>\n 1  0.23 Ideal     E     SI2      61.5    55   326  3.95  3.98  2.43\n 2  0.21 Premium   E     SI1      59.8    61   326  3.89  3.84  2.31\n 3  0.23 Good      E     VS1      56.9    65   327  4.05  4.07  2.31\n 4  0.29 Premium   I     VS2      62.4    58   334  4.2   4.23  2.63\n 5  0.31 Good      J     SI2      63.3    58   335  4.34  4.35  2.75\n 6  0.24 Very Good J     VVS2     62.8    57   336  3.94  3.96  2.48\n 7  0.24 Very Good I     VVS1     62.3    57   336  3.95  3.98  2.47\n 8  0.26 Very Good H     SI1      61.9    55   337  4.07  4.11  2.53\n 9  0.22 Fair      E     VS2      65.1    61   337  3.87  3.78  2.49\n10  0.23 Very Good H     VS1      59.4    61   338  4     4.05  2.39\n# ℹ 53,930 more rows\n```\n:::\n\n```{.r .cell-code  code-fold=\"false\"}\ndiamonds %>%\n  group_by(cut) %>%\n  summarise(price = mean(price))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 5 × 2\n  cut       price\n  <ord>     <dbl>\n1 Fair      4359.\n2 Good      3929.\n3 Very Good 3982.\n4 Premium   4584.\n5 Ideal     3458.\n```\n:::\n\n```{.r .cell-code  code-fold=\"false\"}\ndiamonds %>%\n  group_by(cut) %>%\n  summ(price)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 5 × 9\n  cut       variable type      n unique  mean    sd   min   max\n  <ord>     <chr>    <chr> <int>  <int> <dbl> <dbl> <int> <int>\n1 Fair      price    int    1610   1267 4359. 3560.   337 18574\n2 Good      price    int    4906   3086 3929. 3682.   327 18788\n3 Very Good price    int   12082   5840 3982. 3936.   336 18818\n4 Premium   price    int   13791   6014 4584. 4349.   326 18823\n5 Ideal     price    int   21551   7281 3458. 3808.   326 18806\n```\n:::\n\n```{.r .cell-code  code-fold=\"false\"}\ndiamonds %>%\n  group_by(clarity) %>%\n  summ(x:z)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 24 × 9\n   clarity variable type      n unique  mean    sd   min   max\n   <ord>   <chr>    <chr> <int>  <int> <dbl> <dbl> <dbl> <dbl>\n 1 I1      x        dbl     741    319  6.76 1.03   4.33 10.7 \n 2 I1      y        dbl     741    324  6.71 1.03   4.29 10.5 \n 3 I1      z        dbl     741    249  4.21 0.718  0     6.98\n 4 SI2     x        dbl    9194    492  6.40 1.06   0     9.51\n 5 SI2     y        dbl    9194    490  6.40 1.18   0    58.9 \n 6 SI2     z        dbl    9194    320  3.95 0.660  0     8.06\n 7 SI1     x        dbl   13065    480  5.89 1.04   3.88  8.9 \n 8 SI1     y        dbl   13065    471  5.89 1.04   3.84  8.87\n 9 SI1     z        dbl   13065    301  3.64 0.645  0     5.49\n10 VS2     x        dbl   12258    490  5.66 1.09   0     9.66\n# ℹ 14 more rows\n```\n:::\n\n```{.r .cell-code  code-fold=\"false\"}\ndiamonds %>%\n  group_by(cut) %>%\n  summ(price, .by = clarity)\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in `summarise()`:\n! Can't supply `.by` when `.data` is a grouped data frame.\n```\n:::\n\n```{.r .cell-code  code-fold=\"false\"}\ndiamonds %>%\n  group_by(color) %>%\n  mutate(\n    price3g = cut(price, 3)\n  )\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 53,940 × 11\n# Groups:   color [7]\n   carat cut       color clarity depth table price     x     y     z price3g    \n   <dbl> <ord>     <ord> <ord>   <dbl> <dbl> <int> <dbl> <dbl> <dbl> <fct>      \n 1  0.23 Ideal     E     SI2      61.5    55   326  3.95  3.98  2.43 (308,6.46e…\n 2  0.21 Premium   E     SI1      59.8    61   326  3.89  3.84  2.31 (308,6.46e…\n 3  0.23 Good      E     VS1      56.9    65   327  4.05  4.07  2.31 (308,6.46e…\n 4  0.29 Premium   I     VS2      62.4    58   334  4.2   4.23  2.63 (316,6.5e+…\n 5  0.31 Good      J     SI2      63.3    58   335  4.34  4.35  2.75 (317,6.46e…\n 6  0.24 Very Good J     VVS2     62.8    57   336  3.94  3.96  2.48 (317,6.46e…\n 7  0.24 Very Good I     VVS1     62.3    57   336  3.95  3.98  2.47 (316,6.5e+…\n 8  0.26 Very Good H     SI1      61.9    55   337  4.07  4.11  2.53 (319,6.49e…\n 9  0.22 Fair      E     VS2      65.1    61   337  3.87  3.78  2.49 (308,6.46e…\n10  0.23 Very Good H     VS1      59.4    61   338  4     4.05  2.39 (319,6.49e…\n# ℹ 53,930 more rows\n```\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}