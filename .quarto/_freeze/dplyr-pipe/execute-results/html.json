{
  "hash": "14cb32f5993d12f58100b4d45688ccb8",
  "result": {
    "markdown": "---\ntheme: united\nlang: zh\ntoc: true\ntoc-depth: 3\ntoc-expand: 2\ntoc-title: 本页目录\nnumber-sections: true\n---\n\n\n# magrittr 管道\n\n## `%>%` 定义\n\n在继续讲解 dplyr 函数前，我想介绍一个非常特殊的函数，来自 magrittr 包的管道（pipe）函数 `%>%`。 它的用途是连通函数，美化代码。\n\n它的定义如下\n\n-   `f(a)` 等于 `a %>% f()`\n-   `f(a, b)` 等于 `a %>% f(b)`\n-   `f(a, b, c, ...)` 等于 `a %>% f(b, c, ...)`\n\n比方说，`names(diamonds)` 等于 `diamonds %>% names()`。\n\n::: callout-warning\n## 警告\n\n从下一章开始，为了帮助大家养成习惯，我会把几乎所有的函数都写成管道 `%>%` 的形式。\n:::\n\n## `%>%` 优点\n\n为什么要多此一举呢？在数据分析中，我们通常要用到大量的函数，比如我们要对一头牛做复杂的处理：\n\n**【错误】写法一**\n\n\n::: {.cell}\n\n```{.r .cell-code}\n吃(蘸(涮(挤(捶打(切(宰(牛))), 成丸), 牛骨清汤), 沙茶))\n```\n:::\n\n\n**【错误】写法二**\n\n\n::: {.cell}\n\n```{.r .cell-code}\n吃(\n  蘸(\n    涮(\n      挤(\n        捶打(\n          切(\n            宰(牛)\n          )\n        ), 成丸\n      ), 牛骨清汤\n    ), 沙茶\n  )\n)\n```\n:::\n\n\n**【正确】写法三（使用管道）**\n\n\n::: {.cell}\n\n```{.r .cell-code}\n牛 %>%\n  宰() %>%\n  切() %>%\n  捶打() %>%\n  挤(成丸) %>%\n  涮(牛骨清汤) %>%\n  蘸(沙茶) %>%\n  吃()\n```\n:::\n\n\n第三种写法，明显更自然，更清晰。原来这一系列函数，把牛变成了手打牛肉丸，下清汤锅，蘸沙茶酱，填了肚子——想必是在潮汕地区吃的。\n\n\n::: callout-tip\n## 提示\n\n当我们有连续多个函数连在一起的时候，`%>%` 能让代码更加整洁、易读。\n:::\n\n## `%>%` 范例\n\n任务：先把 price 放到开头，再对它降序排列（从高到低）\n\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# 【错误】写法一\narrange(relocate(diamonds, price), -price)\n\n# 【错误】写法二\narrange(\n  relocate(diamonds, price),\n  -price\n)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# 【正确】写法三，整洁、清晰、易读\ndiamonds %>%\n  relocate(price) %>%\n  arrange(-price)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 53,940 × 10\n   price carat cut       color clarity depth table     x     y     z\n   <int> <dbl> <ord>     <ord> <ord>   <dbl> <dbl> <dbl> <dbl> <dbl>\n 1 18823  2.29 Premium   I     VS2      60.8    60  8.5   8.47  5.16\n 2 18818  2    Very Good G     SI1      63.5    56  7.9   7.97  5.04\n 3 18806  1.51 Ideal     G     IF       61.7    55  7.37  7.41  4.56\n 4 18804  2.07 Ideal     G     SI2      62.5    55  8.2   8.13  5.11\n 5 18803  2    Very Good H     SI1      62.8    57  7.95  8     5.01\n 6 18797  2.29 Premium   I     SI1      61.8    59  8.52  8.45  5.24\n 7 18795  2.04 Premium   H     SI1      58.1    60  8.37  8.28  4.84\n 8 18795  2    Premium   I     VS1      60.8    59  8.13  8.02  4.91\n 9 18791  1.71 Premium   F     VS2      62.3    59  7.57  7.53  4.7 \n10 18791  2.15 Ideal     G     SI2      62.6    54  8.29  8.35  5.21\n# ℹ 53,930 more rows\n```\n:::\n:::\n\n\n## `%>%` 和 `|>`\n\n在 R 4.1 的版本及以后，R 推出了所谓的自然管道（natural pipe）`|>`。它有三个优点，\n\n1. 比较简洁，仅使用了两个字符；\n2. 和 Julia 等编程语言统一了语法；\n3. 随时可用，使用前不需要导入 tidyverse, dplyr 或 magnittr 包。\n\n鉴于上述优点，甚至 tidyverse 的奠基人 Hadley Wickham 都改用了 `|>`，几乎抛弃了 `%>%`。但是需要注意，`|>`也有很多缺点，具体什么我就不赘述了，你们以后遇到了自然知道。\n\n就我个人习惯而言，我还是用 `%>%` 更多一点。而且我也更推荐初学者用 `%>%`，因为它更简单、更少报错。\n\n\n## 为所欲为 {#sec-wei}\n\n我们已经学了一些 `dplyr` 函数。可以发现，几乎所有 `dplyr` 函数输入和输出的格式都是 tibble，这是一个非常精妙的设计。\n\n::: {layout-ncol=2}\n![普通的成语接龙](fig/word_chain_short.png){#fig-short}\n\n![“为所欲为”的成语接龙](fig/word_chain_long.png){#fig-long}\n:::\n\n@sec-chengyu 说到，想要学会成语接龙，学“为所欲为”是最省时省力的。同理，\n\n::: callout-note\n## 笔记\n1. 使用 dplyr 函数，初学者可以“为所欲为”地处理 tibble。\n2. dplyr 函数非常适配管道函数 `%>%`。\n:::\n\n下面是一个简单的证明：\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\n# 定义识别函数\nread_object <- function(object) {\n  input <- substitute(object) %>%\n    as.character()\n  type <- type_sum(object) %>%\n    as.character() %>%\n    str_extract(\"^\\\\w+\")\n\n  judgement <- str_glue(\n    \"{input} 的类型是 {type}。\"\n  )\n  return(judgement)\n}\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\nread_object(diamonds) # 识别 diamonds\n```\n\n::: {.cell-output .cell-output-stdout}\n```\ndiamonds 的类型是 tibble。\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndiamonds2 <- diamonds %>%\n  relocate(price)\n\nread_object(diamonds2) # 识别 diamonds2\n```\n\n::: {.cell-output .cell-output-stdout}\n```\ndiamonds2 的类型是 tibble。\n```\n:::\n:::\n\n\n::: callout-tip\n## 提示\n`relocate()` 输入 diamonds，输出 diamonds2，二者都是 tibble。\n:::\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndiamonds3 <- diamonds2 %>%\n  arrange(-price)\n\nread_object(diamonds3) # 识别 diamonds3\n```\n\n::: {.cell-output .cell-output-stdout}\n```\ndiamonds3 的类型是 tibble。\n```\n:::\n:::\n\n\n::: callout-tip\n## 提示\n同样，`arrange()` 输入 diamonds2，输出 diamonds3，二者都是 tibble。\n:::\n\n\n<!-- 下面是一些反例：\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndiamonds2 <- dim(diamonds)\nread_object(diamonds2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\ndiamonds2 的类型是 int。\n```\n:::\n\n```{.r .cell-code}\ndiamonds2 <- object.size(diamonds)\nread_object(diamonds2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\ndiamonds2 的类型是 objct_sz。\n```\n:::\n\n```{.r .cell-code}\ndiamonds2 <- ggplot(diamonds)\nread_object(diamonds2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\ndiamonds2 的类型是 gg。\n```\n:::\n:::\n\n\n上面这些函数都有各自的作用，但是它们不是 dplyr 函数，所以生成的不是 tibble。因此，它们通常只能作为管道的结尾。\n\n总之，我们作为初学者，只需要熟悉 tibble 就好了。不管来自哪里、什么格式的数据，都可以先转换成 tibble；在 dplyr 的为所欲为之后，也可以输出成各种格式的表格和图片。 -->\n\n值得一提的是，tidyverse 底下的其他包，通常也有“为所欲为”的性质：\n\n\n```{=html}\n<style>\n    tr {\n        text-align: center;\n    }\n</style>\n\n<table>\n  <thead>\n    <tr style=\"border-top:2px solid black;\n      border-bottom:1px solid black\">\n      <th></th>\n      <th>对象</th>\n      <th>函数</th>\n      <td>例子</td>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n    <td>成语接龙</td>\n    <td>“为”</td>\n    <td>特定成语</td>\n    <td>“为所欲为”</td>\n    </tr>\n    <tr>\n    <td>数据</td>\n    <td>tibble</td>\n    <td>dplyr 函数</td>\n    <td>arrange(), relocate() 等</td>\n    </tr>\n    <tr>\n    <td>图形</td>\n    <td>gg</td>\n    <td>ggplot 函数</td>\n    <td>geom_col(), ggtitle() 等</td>\n    </tr>\n    <tr>\n    <td>文本变量</td>\n    <td>character</td>\n    <td>部分 stringr 函数</td>\n    <td>str_replace(), str_extract() 等</td>\n    </tr>\n    <tr>\n    <td>类别变量</td>\n    <td>factor</td>\n    <td>部分 forcats 函数</td>\n    <td>fct_reorder(), fct_recode() 等</td>\n    </tr>\n    <tr style=\"border-bottom:2px solid black\">\n    <td>列表</td>\n    <td>list</td>\n    <td>部分 purrr 函数</td>\n    <td>map(), map2() 等</td>\n    </tr>\n  </tbody>\n</table>\n```\n",
    "supporting": [
      "dplyr-pipe_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}