{
  "hash": "c065e256132df34793ff3641e98623d1",
  "result": {
    "markdown": "---\ntitle: dplyr 入门\ntheme: united\nlang: zh\ntoc: true\ntoc-depth: 3\ntoc-expand: 2\ntoc-title: 本页目录\nnumber-sections: true\n---\n\n\n# `dplyr` 排序\n\n在 tidyverse 中，dplyr 是清理数据的最重要的包。下面，我将从最简单的排序函数开始介绍。\n\n我们通常需要手动排序变量。而在排序个案时，因为变量具有算术性，所以我们可以根据某个（或某些）变量的取值，对个案进行快速排序。\n\n-   排序列（变量）\n    -   `relocate()` 把变量[**手动**]{style=\"color:darkred\"}挪到开头\n        -   `.before` 和 `.after` [**精确地**]{style=\"color:darkred\"}把变量挪到某个位置\n-   排序行（个案）\n    -   `arrange()` 根据[**变量取值**]{style=\"color:darkred\"}排序个案\n\n## `relocate()`\n\n让我们回到前面摘出来的示例数据。\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\nlibrary(tidyverse)\n\ndiamonds # 示例数据\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 53,940 × 10\n   carat cut       color clarity depth table price     x     y     z\n   <dbl> <ord>     <ord> <ord>   <dbl> <dbl> <int> <dbl> <dbl> <dbl>\n 1  0.23 Ideal     E     SI2      61.5    55   326  3.95  3.98  2.43\n 2  0.21 Premium   E     SI1      59.8    61   326  3.89  3.84  2.31\n 3  0.23 Good      E     VS1      56.9    65   327  4.05  4.07  2.31\n 4  0.29 Premium   I     VS2      62.4    58   334  4.2   4.23  2.63\n 5  0.31 Good      J     SI2      63.3    58   335  4.34  4.35  2.75\n 6  0.24 Very Good J     VVS2     62.8    57   336  3.94  3.96  2.48\n 7  0.24 Very Good I     VVS1     62.3    57   336  3.95  3.98  2.47\n 8  0.26 Very Good H     SI1      61.9    55   337  4.07  4.11  2.53\n 9  0.22 Fair      E     VS2      65.1    61   337  3.87  3.78  2.49\n10  0.23 Very Good H     VS1      59.4    61   338  4     4.05  2.39\n# ℹ 53,930 more rows\n```\n:::\n:::\n\n\n接下来，我将运行一些 `relocate()` 函数的示例，请特别关注列的顺序变化。\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\nrelocate(diamonds, price) # 把price变量提到最前，其余顺序不变\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 53,940 × 10\n   price carat cut       color clarity depth table     x     y     z\n   <int> <dbl> <ord>     <ord> <ord>   <dbl> <dbl> <dbl> <dbl> <dbl>\n 1   326  0.23 Ideal     E     SI2      61.5    55  3.95  3.98  2.43\n 2   326  0.21 Premium   E     SI1      59.8    61  3.89  3.84  2.31\n 3   327  0.23 Good      E     VS1      56.9    65  4.05  4.07  2.31\n 4   334  0.29 Premium   I     VS2      62.4    58  4.2   4.23  2.63\n 5   335  0.31 Good      J     SI2      63.3    58  4.34  4.35  2.75\n 6   336  0.24 Very Good J     VVS2     62.8    57  3.94  3.96  2.48\n 7   336  0.24 Very Good I     VVS1     62.3    57  3.95  3.98  2.47\n 8   337  0.26 Very Good H     SI1      61.9    55  4.07  4.11  2.53\n 9   337  0.22 Fair      E     VS2      65.1    61  3.87  3.78  2.49\n10   338  0.23 Very Good H     VS1      59.4    61  4     4.05  2.39\n# ℹ 53,930 more rows\n```\n:::\n\n```{.r .cell-code  code-fold=\"false\"}\n# 使用管道函数，重写上一行代码（结果不会变）\n# 当函数多了以后，这会让代码更加干净、整洁\ndiamonds %>% \n  relocate(price)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 53,940 × 10\n   price carat cut       color clarity depth table     x     y     z\n   <int> <dbl> <ord>     <ord> <ord>   <dbl> <dbl> <dbl> <dbl> <dbl>\n 1   326  0.23 Ideal     E     SI2      61.5    55  3.95  3.98  2.43\n 2   326  0.21 Premium   E     SI1      59.8    61  3.89  3.84  2.31\n 3   327  0.23 Good      E     VS1      56.9    65  4.05  4.07  2.31\n 4   334  0.29 Premium   I     VS2      62.4    58  4.2   4.23  2.63\n 5   335  0.31 Good      J     SI2      63.3    58  4.34  4.35  2.75\n 6   336  0.24 Very Good J     VVS2     62.8    57  3.94  3.96  2.48\n 7   336  0.24 Very Good I     VVS1     62.3    57  3.95  3.98  2.47\n 8   337  0.26 Very Good H     SI1      61.9    55  4.07  4.11  2.53\n 9   337  0.22 Fair      E     VS2      65.1    61  3.87  3.78  2.49\n10   338  0.23 Very Good H     VS1      59.4    61  4     4.05  2.39\n# ℹ 53,930 more rows\n```\n:::\n:::\n\n\n## `.before` 和 `.after`\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\nrelocate(diamonds, price, .before = cut) # 把price提到cut之前，其余顺序不变\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 53,940 × 10\n   carat price cut       color clarity depth table     x     y     z\n   <dbl> <int> <ord>     <ord> <ord>   <dbl> <dbl> <dbl> <dbl> <dbl>\n 1  0.23   326 Ideal     E     SI2      61.5    55  3.95  3.98  2.43\n 2  0.21   326 Premium   E     SI1      59.8    61  3.89  3.84  2.31\n 3  0.23   327 Good      E     VS1      56.9    65  4.05  4.07  2.31\n 4  0.29   334 Premium   I     VS2      62.4    58  4.2   4.23  2.63\n 5  0.31   335 Good      J     SI2      63.3    58  4.34  4.35  2.75\n 6  0.24   336 Very Good J     VVS2     62.8    57  3.94  3.96  2.48\n 7  0.24   336 Very Good I     VVS1     62.3    57  3.95  3.98  2.47\n 8  0.26   337 Very Good H     SI1      61.9    55  4.07  4.11  2.53\n 9  0.22   337 Fair      E     VS2      65.1    61  3.87  3.78  2.49\n10  0.23   338 Very Good H     VS1      59.4    61  4     4.05  2.39\n# ℹ 53,930 more rows\n```\n:::\n\n```{.r .cell-code  code-fold=\"false\"}\nrelocate(diamonds, price, .after = cut) # 把price提到cut之后，其余顺序不变\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 53,940 × 10\n   carat cut       price color clarity depth table     x     y     z\n   <dbl> <ord>     <int> <ord> <ord>   <dbl> <dbl> <dbl> <dbl> <dbl>\n 1  0.23 Ideal       326 E     SI2      61.5    55  3.95  3.98  2.43\n 2  0.21 Premium     326 E     SI1      59.8    61  3.89  3.84  2.31\n 3  0.23 Good        327 E     VS1      56.9    65  4.05  4.07  2.31\n 4  0.29 Premium     334 I     VS2      62.4    58  4.2   4.23  2.63\n 5  0.31 Good        335 J     SI2      63.3    58  4.34  4.35  2.75\n 6  0.24 Very Good   336 J     VVS2     62.8    57  3.94  3.96  2.48\n 7  0.24 Very Good   336 I     VVS1     62.3    57  3.95  3.98  2.47\n 8  0.26 Very Good   337 H     SI1      61.9    55  4.07  4.11  2.53\n 9  0.22 Fair        337 E     VS2      65.1    61  3.87  3.78  2.49\n10  0.23 Very Good   338 H     VS1      59.4    61  4     4.05  2.39\n# ℹ 53,930 more rows\n```\n:::\n\n```{.r .cell-code  code-fold=\"false\"}\n# 使用管道函数，重写上一行代码（结果不会变）\n# 当函数多了以后，这会让代码更加干净、整洁\ndiamonds %>% \n  relocate(price, .after = cut)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 53,940 × 10\n   carat cut       price color clarity depth table     x     y     z\n   <dbl> <ord>     <int> <ord> <ord>   <dbl> <dbl> <dbl> <dbl> <dbl>\n 1  0.23 Ideal       326 E     SI2      61.5    55  3.95  3.98  2.43\n 2  0.21 Premium     326 E     SI1      59.8    61  3.89  3.84  2.31\n 3  0.23 Good        327 E     VS1      56.9    65  4.05  4.07  2.31\n 4  0.29 Premium     334 I     VS2      62.4    58  4.2   4.23  2.63\n 5  0.31 Good        335 J     SI2      63.3    58  4.34  4.35  2.75\n 6  0.24 Very Good   336 J     VVS2     62.8    57  3.94  3.96  2.48\n 7  0.24 Very Good   336 I     VVS1     62.3    57  3.95  3.98  2.47\n 8  0.26 Very Good   337 H     SI1      61.9    55  4.07  4.11  2.53\n 9  0.22 Fair        337 E     VS2      65.1    61  3.87  3.78  2.49\n10  0.23 Very Good   338 H     VS1      59.4    61  4     4.05  2.39\n# ℹ 53,930 more rows\n```\n:::\n:::\n\n\n## `arrange()`\n\n在统计中，我们很少改变变量的顺序，因为变量的顺序不会影响统计分析的结果。\n\n::: callout-caution\n## 注意\n\n我们通常不会对数据做任何手动的改变\n:::\n\n但是，我们常常对个案排序，就像Excel里的升序、降序那样。要怎么理解，我们明明是对个案排序，却借助了变量呢？\n\n-   在小学里，根据学号[*（变量）*]{style=\"color:gray\"}排序，变的是小学生[*（个案）*]{style=\"color:gray\"}的顺序。\n-   在12306买票时，根据列车发车时间[*（变量）*]{style=\"color:gray\"}排序，变的是列车[*（个案）*]{style=\"color:gray\"}的顺序。\n-   在网购时，根据商品价格[*（变量）*]{style=\"color:gray\"}排序，变的是商品[*（个案）*]{style=\"color:gray\"}的顺序。\n\n::: callout-important\n## 重要\n\n变量的每个值都是一条个案，所以对单个变量排序的本质是对个案排序！\n:::\n\n这里我们借助了变量的统计能力（算术性）。反过来说，因为个案不具备统计能力，所以我们无法对变量做类似的排序，只能手动调整它们的位置了。\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\narrange(diamonds, price) # 根据price变量升序（从低到高）\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 53,940 × 10\n   carat cut       color clarity depth table price     x     y     z\n   <dbl> <ord>     <ord> <ord>   <dbl> <dbl> <int> <dbl> <dbl> <dbl>\n 1  0.23 Ideal     E     SI2      61.5    55   326  3.95  3.98  2.43\n 2  0.21 Premium   E     SI1      59.8    61   326  3.89  3.84  2.31\n 3  0.23 Good      E     VS1      56.9    65   327  4.05  4.07  2.31\n 4  0.29 Premium   I     VS2      62.4    58   334  4.2   4.23  2.63\n 5  0.31 Good      J     SI2      63.3    58   335  4.34  4.35  2.75\n 6  0.24 Very Good J     VVS2     62.8    57   336  3.94  3.96  2.48\n 7  0.24 Very Good I     VVS1     62.3    57   336  3.95  3.98  2.47\n 8  0.26 Very Good H     SI1      61.9    55   337  4.07  4.11  2.53\n 9  0.22 Fair      E     VS2      65.1    61   337  3.87  3.78  2.49\n10  0.23 Very Good H     VS1      59.4    61   338  4     4.05  2.39\n# ℹ 53,930 more rows\n```\n:::\n\n```{.r .cell-code  code-fold=\"false\"}\narrange(diamonds, -price) # 根据price变量降序（从高到低）\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 53,940 × 10\n   carat cut       color clarity depth table price     x     y     z\n   <dbl> <ord>     <ord> <ord>   <dbl> <dbl> <int> <dbl> <dbl> <dbl>\n 1  2.29 Premium   I     VS2      60.8    60 18823  8.5   8.47  5.16\n 2  2    Very Good G     SI1      63.5    56 18818  7.9   7.97  5.04\n 3  1.51 Ideal     G     IF       61.7    55 18806  7.37  7.41  4.56\n 4  2.07 Ideal     G     SI2      62.5    55 18804  8.2   8.13  5.11\n 5  2    Very Good H     SI1      62.8    57 18803  7.95  8     5.01\n 6  2.29 Premium   I     SI1      61.8    59 18797  8.52  8.45  5.24\n 7  2.04 Premium   H     SI1      58.1    60 18795  8.37  8.28  4.84\n 8  2    Premium   I     VS1      60.8    59 18795  8.13  8.02  4.91\n 9  1.71 Premium   F     VS2      62.3    59 18791  7.57  7.53  4.7 \n10  2.15 Ideal     G     SI2      62.6    54 18791  8.29  8.35  5.21\n# ℹ 53,930 more rows\n```\n:::\n\n```{.r .cell-code  code-fold=\"false\"}\n# 使用管道函数，重写上一行代码（结果不会变）\n# 当函数多了以后，这会让代码更加干净、整洁\ndiamonds %>%\n  arrange(-price)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 53,940 × 10\n   carat cut       color clarity depth table price     x     y     z\n   <dbl> <ord>     <ord> <ord>   <dbl> <dbl> <int> <dbl> <dbl> <dbl>\n 1  2.29 Premium   I     VS2      60.8    60 18823  8.5   8.47  5.16\n 2  2    Very Good G     SI1      63.5    56 18818  7.9   7.97  5.04\n 3  1.51 Ideal     G     IF       61.7    55 18806  7.37  7.41  4.56\n 4  2.07 Ideal     G     SI2      62.5    55 18804  8.2   8.13  5.11\n 5  2    Very Good H     SI1      62.8    57 18803  7.95  8     5.01\n 6  2.29 Premium   I     SI1      61.8    59 18797  8.52  8.45  5.24\n 7  2.04 Premium   H     SI1      58.1    60 18795  8.37  8.28  4.84\n 8  2    Premium   I     VS1      60.8    59 18795  8.13  8.02  4.91\n 9  1.71 Premium   F     VS2      62.3    59 18791  7.57  7.53  4.7 \n10  2.15 Ideal     G     SI2      62.6    54 18791  8.29  8.35  5.21\n# ℹ 53,930 more rows\n```\n:::\n:::\n\n\n## 再议 `%>%`\n\n::: callout-warning\n## 警告\n\n从下一章开始，为了帮助大家养成习惯，我会把所有的函数都写成管道 `%>%` 的形式。\n:::\n\n在实际的数据分析中，90%以上的函数会和管道一起出现。请看下面的例子：\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# 任务：先把 clarity 放到 cut 之前，再对 price 降序排列（从高到低）\n\n# 【错误】不使用管道：混乱\narrange(relocate(diamonds, clarity, .before = cut), -price)\n\n# 【错误】不使用管道：分了行，依然混乱\narrange(\n  relocate(\n    diamonds, \n    clarity, .before = cut\n  ), \n  -price\n)\n\n# 【正确】使用管道：整洁、清晰、易读\ndiamonds %>%\n  relocate(clarity, .before = cut) %>%\n  arrange(-price)\n```\n:::\n\n\n可以看到，短短三行，两个函数，我们就用到了两根管道 `%>%`。事实上，如果用到10个函数，我们就要在它们的前面搭配10根管道才行。\n\n所以说，管道函数的确可能把简单的函数复杂化，但是一旦真正开始清理数据，`%>%` 就像是脊骨一样，绝对不能被抽掉的。\n\n# `dplyr` 选取或删除\n\n我删除了你的微信，本质上是保留了除了你以外所有人的微信。所以删除的本质就是选取。因此，在tidyverse里面，选取函数兼具了“保留”（选取）和“删除”的功能。\n\n-   列命令（选变量）\n    -   `select()` 根据[**位置**]{style=\"color:darkred\"}或[**名称**]{style=\"color:darkred\"}选取列\n        -   `:` 选取[**连续**]{style=\"color:darkred\"}多个变量\n        -   `c()` 选取[**任意**]{style=\"color:darkred\"}多个变量\n    -   `select()` 根据[**变量取值**]{style=\"color:darkred\"}选取列[（进阶技巧）]{style=\"color:gray\"}\n    -   `pull()` 根据位置或名称抽取一列，输出[**矢量**]{style=\"color:darkred\"}格式[（进阶技巧）]{style=\"color:gray\"}\n-   行命令（选个案）\n    -   `head()` 和 `tail()` 抽取数据的[**开头**]{style=\"color:darkred\"}或[**结尾**]{style=\"font-size: 15pt; color: darkred;\"}几行\n    -   `slice()` 根据[**位置**]{style=\"color:darkred\"}抽取行\n    -   `filter()` 根据[**变量取值**]{style=\"color:darkred\"}抽取行\n    -   `slice_sample` [**随机**]{style=\"color:darkred\"}抽取若干行[（进阶技巧）]{style=\"color:gray\"}\n    -   `distinct()` 去重，保留[**不重复**]{style=\"color:darkred\"}的个案[（进阶技巧）]{style=\"color:gray\"}\n\n## `select()`\n\n`select()` 可以根据位置选取列。\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\ndiamonds %>%\n  select(5) # 抽取第五列\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 53,940 × 1\n   depth\n   <dbl>\n 1  61.5\n 2  59.8\n 3  56.9\n 4  62.4\n 5  63.3\n 6  62.8\n 7  62.3\n 8  61.9\n 9  65.1\n10  59.4\n# ℹ 53,930 more rows\n```\n:::\n\n```{.r .cell-code  code-fold=\"false\"}\ndiamonds %>%\n  select(-5) # 删除第五列\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 53,940 × 9\n   carat cut       color clarity table price     x     y     z\n   <dbl> <ord>     <ord> <ord>   <dbl> <int> <dbl> <dbl> <dbl>\n 1  0.23 Ideal     E     SI2        55   326  3.95  3.98  2.43\n 2  0.21 Premium   E     SI1        61   326  3.89  3.84  2.31\n 3  0.23 Good      E     VS1        65   327  4.05  4.07  2.31\n 4  0.29 Premium   I     VS2        58   334  4.2   4.23  2.63\n 5  0.31 Good      J     SI2        58   335  4.34  4.35  2.75\n 6  0.24 Very Good J     VVS2       57   336  3.94  3.96  2.48\n 7  0.24 Very Good I     VVS1       57   336  3.95  3.98  2.47\n 8  0.26 Very Good H     SI1        55   337  4.07  4.11  2.53\n 9  0.22 Fair      E     VS2        61   337  3.87  3.78  2.49\n10  0.23 Very Good H     VS1        61   338  4     4.05  2.39\n# ℹ 53,930 more rows\n```\n:::\n:::\n\n\n`select()` 也可以根据名称选取列。\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\ndiamonds %>%\n  select(cut) # 选取cut变量\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 53,940 × 1\n   cut      \n   <ord>    \n 1 Ideal    \n 2 Premium  \n 3 Good     \n 4 Premium  \n 5 Good     \n 6 Very Good\n 7 Very Good\n 8 Very Good\n 9 Fair     \n10 Very Good\n# ℹ 53,930 more rows\n```\n:::\n\n```{.r .cell-code  code-fold=\"false\"}\ndiamonds %>%\n  select(-cut) # 删除cut变量\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 53,940 × 9\n   carat color clarity depth table price     x     y     z\n   <dbl> <ord> <ord>   <dbl> <dbl> <int> <dbl> <dbl> <dbl>\n 1  0.23 E     SI2      61.5    55   326  3.95  3.98  2.43\n 2  0.21 E     SI1      59.8    61   326  3.89  3.84  2.31\n 3  0.23 E     VS1      56.9    65   327  4.05  4.07  2.31\n 4  0.29 I     VS2      62.4    58   334  4.2   4.23  2.63\n 5  0.31 J     SI2      63.3    58   335  4.34  4.35  2.75\n 6  0.24 J     VVS2     62.8    57   336  3.94  3.96  2.48\n 7  0.24 I     VVS1     62.3    57   336  3.95  3.98  2.47\n 8  0.26 H     SI1      61.9    55   337  4.07  4.11  2.53\n 9  0.22 E     VS2      65.1    61   337  3.87  3.78  2.49\n10  0.23 H     VS1      59.4    61   338  4     4.05  2.39\n# ℹ 53,930 more rows\n```\n:::\n:::\n\n\n## `:` 和 `c()`\n\n`:` 表示多个连续的整数。比如，\n\n-   `1:3` 表示 1, 2, 3 这三个数\n-   `-1:3` 表示 -1, 0, 1, 2, 3 这五个数\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\n1:5\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1 2 3 4 5\n```\n:::\n\n```{.r .cell-code  code-fold=\"false\"}\n# 选取前五个变量\ndiamonds %>%\n  select(1:5)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 53,940 × 5\n   carat cut       color clarity depth\n   <dbl> <ord>     <ord> <ord>   <dbl>\n 1  0.23 Ideal     E     SI2      61.5\n 2  0.21 Premium   E     SI1      59.8\n 3  0.23 Good      E     VS1      56.9\n 4  0.29 Premium   I     VS2      62.4\n 5  0.31 Good      J     SI2      63.3\n 6  0.24 Very Good J     VVS2     62.8\n 7  0.24 Very Good I     VVS1     62.3\n 8  0.26 Very Good H     SI1      61.9\n 9  0.22 Fair      E     VS2      65.1\n10  0.23 Very Good H     VS1      59.4\n# ℹ 53,930 more rows\n```\n:::\n\n```{.r .cell-code  code-fold=\"false\"}\n# 用另一种方式选取前五个变量\ndiamonds %>%\n  select(carat:depth)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 53,940 × 5\n   carat cut       color clarity depth\n   <dbl> <ord>     <ord> <ord>   <dbl>\n 1  0.23 Ideal     E     SI2      61.5\n 2  0.21 Premium   E     SI1      59.8\n 3  0.23 Good      E     VS1      56.9\n 4  0.29 Premium   I     VS2      62.4\n 5  0.31 Good      J     SI2      63.3\n 6  0.24 Very Good J     VVS2     62.8\n 7  0.24 Very Good I     VVS1     62.3\n 8  0.26 Very Good H     SI1      61.9\n 9  0.22 Fair      E     VS2      65.1\n10  0.23 Very Good H     VS1      59.4\n# ℹ 53,930 more rows\n```\n:::\n:::\n\n\n`c()` 表示多个数的集合，它比 `:` 更灵活、更普适，缺点是写起来麻烦些。比如，\n\n-   `c(1, 2, 3)` 表示 1, 2, 3 这三个数\n-   `c(1:3)` 也表示 1, 2, 3 这三个数\n\n这两种写法都不如 `1:3` 简洁。但是，`c()` 可以表示不连续的整数，也可以表示其他类型的数：\n\n-   `c(1:3, 5)` 表示 1, 2, 3, 5 这四个数\n-   `c(1:3, 5:6)` 表示 1, 2, 3, 5, 6 这五个数\n-   `c(1.23, pi, exp(1), sqrt(2))` 表示 1.23, $\\pi$, $e$, $\\sqrt{2}$ 这四个数\n    -   不过，这些数就不能用来选变量了哦\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\nc(1, 3:5)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1 3 4 5\n```\n:::\n\n```{.r .cell-code  code-fold=\"false\"}\n# 选取第1、3、4、5个变量\ndiamonds %>%\n  select(c(1, 3:5))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 53,940 × 4\n   carat color clarity depth\n   <dbl> <ord> <ord>   <dbl>\n 1  0.23 E     SI2      61.5\n 2  0.21 E     SI1      59.8\n 3  0.23 E     VS1      56.9\n 4  0.29 I     VS2      62.4\n 5  0.31 J     SI2      63.3\n 6  0.24 J     VVS2     62.8\n 7  0.24 I     VVS1     62.3\n 8  0.26 H     SI1      61.9\n 9  0.22 E     VS2      65.1\n10  0.23 H     VS1      59.4\n# ℹ 53,930 more rows\n```\n:::\n\n```{.r .cell-code  code-fold=\"false\"}\n# 用另一种方式选取这些变量\ndiamonds %>%\n  select(c(carat, color:depth))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 53,940 × 4\n   carat color clarity depth\n   <dbl> <ord> <ord>   <dbl>\n 1  0.23 E     SI2      61.5\n 2  0.21 E     SI1      59.8\n 3  0.23 E     VS1      56.9\n 4  0.29 I     VS2      62.4\n 5  0.31 J     SI2      63.3\n 6  0.24 J     VVS2     62.8\n 7  0.24 I     VVS1     62.3\n 8  0.26 H     SI1      61.9\n 9  0.22 E     VS2      65.1\n10  0.23 H     VS1      59.4\n# ℹ 53,930 more rows\n```\n:::\n:::\n\n\n## `head()` 和 `tail()`\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\ndiamonds %>%\n  head() # 抽取前六条\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 10\n  carat cut       color clarity depth table price     x     y     z\n  <dbl> <ord>     <ord> <ord>   <dbl> <dbl> <int> <dbl> <dbl> <dbl>\n1  0.23 Ideal     E     SI2      61.5    55   326  3.95  3.98  2.43\n2  0.21 Premium   E     SI1      59.8    61   326  3.89  3.84  2.31\n3  0.23 Good      E     VS1      56.9    65   327  4.05  4.07  2.31\n4  0.29 Premium   I     VS2      62.4    58   334  4.2   4.23  2.63\n5  0.31 Good      J     SI2      63.3    58   335  4.34  4.35  2.75\n6  0.24 Very Good J     VVS2     62.8    57   336  3.94  3.96  2.48\n```\n:::\n\n```{.r .cell-code  code-fold=\"false\"}\ndiamonds %>%\n  head(2) # 抽取前两条\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 2 × 10\n  carat cut     color clarity depth table price     x     y     z\n  <dbl> <ord>   <ord> <ord>   <dbl> <dbl> <int> <dbl> <dbl> <dbl>\n1  0.23 Ideal   E     SI2      61.5    55   326  3.95  3.98  2.43\n2  0.21 Premium E     SI1      59.8    61   326  3.89  3.84  2.31\n```\n:::\n\n```{.r .cell-code  code-fold=\"false\"}\ndiamonds %>%\n  tail() # 抽取后六条\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 10\n  carat cut       color clarity depth table price     x     y     z\n  <dbl> <ord>     <ord> <ord>   <dbl> <dbl> <int> <dbl> <dbl> <dbl>\n1  0.72 Premium   D     SI1      62.7    59  2757  5.69  5.73  3.58\n2  0.72 Ideal     D     SI1      60.8    57  2757  5.75  5.76  3.5 \n3  0.72 Good      D     SI1      63.1    55  2757  5.69  5.75  3.61\n4  0.7  Very Good D     SI1      62.8    60  2757  5.66  5.68  3.56\n5  0.86 Premium   H     SI2      61      58  2757  6.15  6.12  3.74\n6  0.75 Ideal     D     SI2      62.2    55  2757  5.83  5.87  3.64\n```\n:::\n\n```{.r .cell-code  code-fold=\"false\"}\ndiamonds %>%\n  tail(2) # 抽取后两条\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 2 × 10\n  carat cut     color clarity depth table price     x     y     z\n  <dbl> <ord>   <ord> <ord>   <dbl> <dbl> <int> <dbl> <dbl> <dbl>\n1  0.86 Premium H     SI2      61      58  2757  6.15  6.12  3.74\n2  0.75 Ideal   D     SI2      62.2    55  2757  5.83  5.87  3.64\n```\n:::\n:::\n\n\n## `slice()`\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\ndiamonds %>%\n  slice(5) # 抽取第五条\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 × 10\n  carat cut   color clarity depth table price     x     y     z\n  <dbl> <ord> <ord> <ord>   <dbl> <dbl> <int> <dbl> <dbl> <dbl>\n1  0.31 Good  J     SI2      63.3    58   335  4.34  4.35  2.75\n```\n:::\n\n```{.r .cell-code  code-fold=\"false\"}\ndiamonds %>%\n  slice(1:5) # 抽取前五条\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 5 × 10\n  carat cut     color clarity depth table price     x     y     z\n  <dbl> <ord>   <ord> <ord>   <dbl> <dbl> <int> <dbl> <dbl> <dbl>\n1  0.23 Ideal   E     SI2      61.5    55   326  3.95  3.98  2.43\n2  0.21 Premium E     SI1      59.8    61   326  3.89  3.84  2.31\n3  0.23 Good    E     VS1      56.9    65   327  4.05  4.07  2.31\n4  0.29 Premium I     VS2      62.4    58   334  4.2   4.23  2.63\n5  0.31 Good    J     SI2      63.3    58   335  4.34  4.35  2.75\n```\n:::\n\n```{.r .cell-code  code-fold=\"false\"}\ndiamonds %>%\n  slice(-5) # 删除第五条\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 53,939 × 10\n   carat cut       color clarity depth table price     x     y     z\n   <dbl> <ord>     <ord> <ord>   <dbl> <dbl> <int> <dbl> <dbl> <dbl>\n 1  0.23 Ideal     E     SI2      61.5    55   326  3.95  3.98  2.43\n 2  0.21 Premium   E     SI1      59.8    61   326  3.89  3.84  2.31\n 3  0.23 Good      E     VS1      56.9    65   327  4.05  4.07  2.31\n 4  0.29 Premium   I     VS2      62.4    58   334  4.2   4.23  2.63\n 5  0.24 Very Good J     VVS2     62.8    57   336  3.94  3.96  2.48\n 6  0.24 Very Good I     VVS1     62.3    57   336  3.95  3.98  2.47\n 7  0.26 Very Good H     SI1      61.9    55   337  4.07  4.11  2.53\n 8  0.22 Fair      E     VS2      65.1    61   337  3.87  3.78  2.49\n 9  0.23 Very Good H     VS1      59.4    61   338  4     4.05  2.39\n10  0.3  Good      J     SI1      64      55   339  4.25  4.28  2.73\n# ℹ 53,929 more rows\n```\n:::\n:::\n\n\n## `filter()`\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\ndiamonds %>%\n  filter(price < 1000) # 仅筛选$1000以内的钻石\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 14,499 × 10\n   carat cut       color clarity depth table price     x     y     z\n   <dbl> <ord>     <ord> <ord>   <dbl> <dbl> <int> <dbl> <dbl> <dbl>\n 1  0.23 Ideal     E     SI2      61.5    55   326  3.95  3.98  2.43\n 2  0.21 Premium   E     SI1      59.8    61   326  3.89  3.84  2.31\n 3  0.23 Good      E     VS1      56.9    65   327  4.05  4.07  2.31\n 4  0.29 Premium   I     VS2      62.4    58   334  4.2   4.23  2.63\n 5  0.31 Good      J     SI2      63.3    58   335  4.34  4.35  2.75\n 6  0.24 Very Good J     VVS2     62.8    57   336  3.94  3.96  2.48\n 7  0.24 Very Good I     VVS1     62.3    57   336  3.95  3.98  2.47\n 8  0.26 Very Good H     SI1      61.9    55   337  4.07  4.11  2.53\n 9  0.22 Fair      E     VS2      65.1    61   337  3.87  3.78  2.49\n10  0.23 Very Good H     VS1      59.4    61   338  4     4.05  2.39\n# ℹ 14,489 more rows\n```\n:::\n\n```{.r .cell-code  code-fold=\"false\"}\ndiamonds %>%\n  filter(clarity == \"VVS2\") # 仅筛选VVS2级净度的钻石\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 5,066 × 10\n   carat cut       color clarity depth table price     x     y     z\n   <dbl> <ord>     <ord> <ord>   <dbl> <dbl> <int> <dbl> <dbl> <dbl>\n 1  0.24 Very Good J     VVS2     62.8    57   336  3.94  3.96  2.48\n 2  0.23 Very Good G     VVS2     60.4    58   354  3.97  4.01  2.41\n 3  0.28 Ideal     G     VVS2     61.4    56   553  4.19  4.22  2.58\n 4  0.26 Very Good F     VVS2     59.2    60   554  4.19  4.22  2.49\n 5  0.26 Very Good E     VVS2     59.9    58   554  4.15  4.23  2.51\n 6  0.26 Very Good D     VVS2     62.4    54   554  4.08  4.13  2.56\n 7  0.26 Very Good D     VVS2     62.8    60   554  4.01  4.05  2.53\n 8  0.26 Ideal     E     VVS2     62.9    58   554  4.02  4.06  2.54\n 9  0.24 Premium   H     VVS2     60.7    58   554  4.07  4.04  2.46\n10  0.74 Ideal     I     VVS2     62.3    55  2761  5.77  5.81  3.61\n# ℹ 5,056 more rows\n```\n:::\n:::\n\n\n我们来总结一下 `filter()` 的用法，它的第一项是数据（tibble），第二项是一个条件判断（judgement）。下面第X章会讲到条件判断的各种写法。\n\n# `dplyr` 鸟瞰\n\n## `names()`\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\n# 罗列变量名\ndiamonds %>%\n  names()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] \"carat\"   \"cut\"     \"color\"   \"clarity\" \"depth\"   \"table\"   \"price\"  \n [8] \"x\"       \"y\"       \"z\"      \n```\n:::\n:::\n\n\n## `glimpse()`\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\n# 浏览变量列表，以及开头的若干个案\ndiamonds %>%\n  glimpse()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 53,940\nColumns: 10\n$ carat   <dbl> 0.23, 0.21, 0.23, 0.29, 0.31, 0.24, 0.24, 0.26, 0.22, 0.23, 0.…\n$ cut     <ord> Ideal, Premium, Good, Premium, Good, Very Good, Very Good, Ver…\n$ color   <ord> E, E, E, I, J, J, I, H, E, H, J, J, F, J, E, E, I, J, J, J, I,…\n$ clarity <ord> SI2, SI1, VS1, VS2, SI2, VVS2, VVS1, SI1, VS2, VS1, SI1, VS1, …\n$ depth   <dbl> 61.5, 59.8, 56.9, 62.4, 63.3, 62.8, 62.3, 61.9, 65.1, 59.4, 64…\n$ table   <dbl> 55, 61, 65, 58, 58, 57, 57, 55, 61, 61, 55, 56, 61, 54, 62, 58…\n$ price   <int> 326, 326, 327, 334, 335, 336, 336, 337, 337, 338, 339, 340, 34…\n$ x       <dbl> 3.95, 3.89, 4.05, 4.20, 4.34, 3.94, 3.95, 4.07, 3.87, 4.00, 4.…\n$ y       <dbl> 3.98, 3.84, 4.07, 4.23, 4.35, 3.96, 3.98, 4.11, 3.78, 4.05, 4.…\n$ z       <dbl> 2.43, 2.31, 2.31, 2.63, 2.75, 2.48, 2.47, 2.53, 2.49, 2.39, 2.…\n```\n:::\n:::\n\n\n## `view()`\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\n# 打开 Excel 式的数据表（无法在这里 演示）\ndiamonds %>%\n  view()\n```\n:::\n\n\n这里因为条件的限制，无法演示。大家可以在自己的 R 里面运行代码，尝试一下。\n\n# `dplyr` 描述和统计\n\n## `count()`\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\n# \ndiamonds %>%\n  count(cut)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 5 × 2\n  cut           n\n  <ord>     <int>\n1 Fair       1610\n2 Good       4906\n3 Very Good 12082\n4 Premium   13791\n5 Ideal     21551\n```\n:::\n\n```{.r .cell-code  code-fold=\"false\"}\n# \ndiamonds %>%\n  count(clarity)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 8 × 2\n  clarity     n\n  <ord>   <int>\n1 I1        741\n2 SI2      9194\n3 SI1     13065\n4 VS2     12258\n5 VS1      8171\n6 VVS2     5066\n7 VVS1     3655\n8 IF       1790\n```\n:::\n:::\n\n\n## `summarise()`\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\n# \ndiamonds %>%\n  summarise(\n    mean_price = mean(price), \n    mean_x = mean(x),\n    mean_y = mean(y),\n    mean_z = mean(z)\n  )\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 × 4\n  mean_price mean_x mean_y mean_z\n       <dbl>  <dbl>  <dbl>  <dbl>\n1      3933.   5.73   5.73   3.54\n```\n:::\n\n```{.r .cell-code  code-fold=\"false\"}\n# \ndiamonds %>%\n  summarise(\n    min = min(price),\n    Q1 = quantile(price, .25),\n    mean = mean(price),\n    median = median(price), \n    sd = sd(price),\n    Q3 = quantile(price, .75),\n    max = max(price)\n  )\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 × 7\n    min    Q1  mean median    sd    Q3   max\n  <int> <dbl> <dbl>  <dbl> <dbl> <dbl> <int>\n1   326   950 3933.   2401 3989. 5324. 18823\n```\n:::\n\n```{.r .cell-code  code-fold=\"false\"}\n# 【我】这部分留到进阶课程吧。\nlibrary(skimr)\ndiamonds %>%\n  skim(price) %>%\n  as_tibble() %>%\n  rename_with(~ str_remove_all(.x, \"^(skim_|numeric\\\\.)\")) %>%\n  print(width = Inf)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 × 12\n  type    variable n_missing complete_rate  mean    sd    p0   p25   p50   p75\n  <chr>   <chr>        <int>         <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl>\n1 numeric price            0             1 3933. 3989.   326   950  2401 5324.\n   p100 hist \n  <dbl> <chr>\n1 18823 ▇▂▁▁▁\n```\n:::\n:::\n\n\n# `dplyr` 更改或新建\n\n当你添加一个手机号到通讯录，手机会问你是“新建联系人”还是“添加到已有联系人”。这是两个不同的操作。不过，dplyr 的`mutate()`函数，将它们合二为一了。\n\n-   更改变量名\n    -   `rename()` 重命名\n    -   `rename_with()` 批量重命名[（进阶技巧）]{style=\"color:gray\"}\n-   更改或新建列（变量）\n    -   `mutate()` 更改、新建变量\n    -   `fill()` 就近填充缺失值[（进阶技巧）]{style=\"color:gray\"}\n    -   `replace_na()` 批量替换缺失值[（进阶技巧）]{style=\"color:gray\"}\n    -   `rownames_to_column()` 复制行名称为变量[（进阶技巧）]{style=\"color:gray\"}\n    -   `add_count()` 添加变量频数为新变量[（进阶技巧）]{style=\"color:gray\"}\n    -   `unite()` 合并多个变量为一个[（进阶技巧）]{style=\"color:gray\"}\n    -   `separate()等` 拆分一个变量为多个[（进阶技巧）]{style=\"color:gray\"}\n    -   `add_column()` *手动添加变量*[（几乎不用）]{style=\"color:lightgray\"}\n-   更改或新建行（个案）\n    -   `expand()` 和 `complete()` 根据变量取值的组合扩充个案[（进阶技巧）]{style=\"color:gray\"}\n    -   `add_row()` *手动添加变量*[（几乎不用）]{style=\"color:lightgray\"}\n\n## `rename()`\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\n# 把 price 改名为 price_USD\ndiamonds %>%\n  rename(price_USD = price)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 53,940 × 10\n   carat cut       color clarity depth table price_USD     x     y     z\n   <dbl> <ord>     <ord> <ord>   <dbl> <dbl>     <int> <dbl> <dbl> <dbl>\n 1  0.23 Ideal     E     SI2      61.5    55       326  3.95  3.98  2.43\n 2  0.21 Premium   E     SI1      59.8    61       326  3.89  3.84  2.31\n 3  0.23 Good      E     VS1      56.9    65       327  4.05  4.07  2.31\n 4  0.29 Premium   I     VS2      62.4    58       334  4.2   4.23  2.63\n 5  0.31 Good      J     SI2      63.3    58       335  4.34  4.35  2.75\n 6  0.24 Very Good J     VVS2     62.8    57       336  3.94  3.96  2.48\n 7  0.24 Very Good I     VVS1     62.3    57       336  3.95  3.98  2.47\n 8  0.26 Very Good H     SI1      61.9    55       337  4.07  4.11  2.53\n 9  0.22 Fair      E     VS2      65.1    61       337  3.87  3.78  2.49\n10  0.23 Very Good H     VS1      59.4    61       338  4     4.05  2.39\n# ℹ 53,930 more rows\n```\n:::\n\n```{.r .cell-code  code-fold=\"false\"}\n# 把 x, y, z 分别改名为 size_x, size_y, size_z\ndiamonds %>%\n  rename(\n    size_x = x,\n    size_y = y,\n    size_z = z\n  )\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 53,940 × 10\n   carat cut       color clarity depth table price size_x size_y size_z\n   <dbl> <ord>     <ord> <ord>   <dbl> <dbl> <int>  <dbl>  <dbl>  <dbl>\n 1  0.23 Ideal     E     SI2      61.5    55   326   3.95   3.98   2.43\n 2  0.21 Premium   E     SI1      59.8    61   326   3.89   3.84   2.31\n 3  0.23 Good      E     VS1      56.9    65   327   4.05   4.07   2.31\n 4  0.29 Premium   I     VS2      62.4    58   334   4.2    4.23   2.63\n 5  0.31 Good      J     SI2      63.3    58   335   4.34   4.35   2.75\n 6  0.24 Very Good J     VVS2     62.8    57   336   3.94   3.96   2.48\n 7  0.24 Very Good I     VVS1     62.3    57   336   3.95   3.98   2.47\n 8  0.26 Very Good H     SI1      61.9    55   337   4.07   4.11   2.53\n 9  0.22 Fair      E     VS2      65.1    61   337   3.87   3.78   2.49\n10  0.23 Very Good H     VS1      59.4    61   338   4      4.05   2.39\n# ℹ 53,930 more rows\n```\n:::\n:::\n\n\n## `mutate()`\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\n# 新建变量 price_RMB，即换算为人民币，假设汇率为7\ndiamonds %>%\n  mutate(price_RMB = price * 7)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 53,940 × 11\n   carat cut       color clarity depth table price     x     y     z price_RMB\n   <dbl> <ord>     <ord> <ord>   <dbl> <dbl> <int> <dbl> <dbl> <dbl>     <dbl>\n 1  0.23 Ideal     E     SI2      61.5    55   326  3.95  3.98  2.43      2282\n 2  0.21 Premium   E     SI1      59.8    61   326  3.89  3.84  2.31      2282\n 3  0.23 Good      E     VS1      56.9    65   327  4.05  4.07  2.31      2289\n 4  0.29 Premium   I     VS2      62.4    58   334  4.2   4.23  2.63      2338\n 5  0.31 Good      J     SI2      63.3    58   335  4.34  4.35  2.75      2345\n 6  0.24 Very Good J     VVS2     62.8    57   336  3.94  3.96  2.48      2352\n 7  0.24 Very Good I     VVS1     62.3    57   336  3.95  3.98  2.47      2352\n 8  0.26 Very Good H     SI1      61.9    55   337  4.07  4.11  2.53      2359\n 9  0.22 Fair      E     VS2      65.1    61   337  3.87  3.78  2.49      2359\n10  0.23 Very Good H     VS1      59.4    61   338  4     4.05  2.39      2366\n# ℹ 53,930 more rows\n```\n:::\n\n```{.r .cell-code  code-fold=\"false\"}\n# 更改变量 price，换算为人民币，假设汇率为7\ndiamonds %>%\n  mutate(price = price * 7)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 53,940 × 10\n   carat cut       color clarity depth table price     x     y     z\n   <dbl> <ord>     <ord> <ord>   <dbl> <dbl> <dbl> <dbl> <dbl> <dbl>\n 1  0.23 Ideal     E     SI2      61.5    55  2282  3.95  3.98  2.43\n 2  0.21 Premium   E     SI1      59.8    61  2282  3.89  3.84  2.31\n 3  0.23 Good      E     VS1      56.9    65  2289  4.05  4.07  2.31\n 4  0.29 Premium   I     VS2      62.4    58  2338  4.2   4.23  2.63\n 5  0.31 Good      J     SI2      63.3    58  2345  4.34  4.35  2.75\n 6  0.24 Very Good J     VVS2     62.8    57  2352  3.94  3.96  2.48\n 7  0.24 Very Good I     VVS1     62.3    57  2352  3.95  3.98  2.47\n 8  0.26 Very Good H     SI1      61.9    55  2359  4.07  4.11  2.53\n 9  0.22 Fair      E     VS2      65.1    61  2359  3.87  3.78  2.49\n10  0.23 Very Good H     VS1      59.4    61  2366  4     4.05  2.39\n# ℹ 53,930 more rows\n```\n:::\n\n```{.r .cell-code  code-fold=\"false\"}\n# 新建变量 size，由 x, y, z 相乘而得（不代表钻石真实体积）\ndiamonds %>%\n  mutate(size = x * y * z)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 53,940 × 11\n   carat cut       color clarity depth table price     x     y     z  size\n   <dbl> <ord>     <ord> <ord>   <dbl> <dbl> <int> <dbl> <dbl> <dbl> <dbl>\n 1  0.23 Ideal     E     SI2      61.5    55   326  3.95  3.98  2.43  38.2\n 2  0.21 Premium   E     SI1      59.8    61   326  3.89  3.84  2.31  34.5\n 3  0.23 Good      E     VS1      56.9    65   327  4.05  4.07  2.31  38.1\n 4  0.29 Premium   I     VS2      62.4    58   334  4.2   4.23  2.63  46.7\n 5  0.31 Good      J     SI2      63.3    58   335  4.34  4.35  2.75  51.9\n 6  0.24 Very Good J     VVS2     62.8    57   336  3.94  3.96  2.48  38.7\n 7  0.24 Very Good I     VVS1     62.3    57   336  3.95  3.98  2.47  38.8\n 8  0.26 Very Good H     SI1      61.9    55   337  4.07  4.11  2.53  42.3\n 9  0.22 Fair      E     VS2      65.1    61   337  3.87  3.78  2.49  36.4\n10  0.23 Very Good H     VS1      59.4    61   338  4     4.05  2.39  38.7\n# ℹ 53,930 more rows\n```\n:::\n:::\n\n\n# `dplyr` 分组\n\n## `.by`\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\ndiamonds %>%\n  summarise(\n    price = mean(price), \n    .by = cut\n    )\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 5 × 2\n  cut       price\n  <ord>     <dbl>\n1 Ideal     3458.\n2 Premium   4584.\n3 Good      3929.\n4 Very Good 3982.\n5 Fair      4359.\n```\n:::\n\n```{.r .cell-code  code-fold=\"false\"}\ndiamonds %>%\n  mutate(\n    mean_price = mean(price), \n    .by = cut\n    ) %>%\n  relocate(cut, price, mean_price)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 53,940 × 11\n   cut       price mean_price carat color clarity depth table     x     y     z\n   <ord>     <int>      <dbl> <dbl> <ord> <ord>   <dbl> <dbl> <dbl> <dbl> <dbl>\n 1 Ideal       326      3458.  0.23 E     SI2      61.5    55  3.95  3.98  2.43\n 2 Premium     326      4584.  0.21 E     SI1      59.8    61  3.89  3.84  2.31\n 3 Good        327      3929.  0.23 E     VS1      56.9    65  4.05  4.07  2.31\n 4 Premium     334      4584.  0.29 I     VS2      62.4    58  4.2   4.23  2.63\n 5 Good        335      3929.  0.31 J     SI2      63.3    58  4.34  4.35  2.75\n 6 Very Good   336      3982.  0.24 J     VVS2     62.8    57  3.94  3.96  2.48\n 7 Very Good   336      3982.  0.24 I     VVS1     62.3    57  3.95  3.98  2.47\n 8 Very Good   337      3982.  0.26 H     SI1      61.9    55  4.07  4.11  2.53\n 9 Fair        337      4359.  0.22 E     VS2      65.1    61  3.87  3.78  2.49\n10 Very Good   338      3982.  0.23 H     VS1      59.4    61  4     4.05  2.39\n# ℹ 53,930 more rows\n```\n:::\n\n```{.r .cell-code  code-fold=\"false\"}\ndiamonds %>%\n  summarise(\n    price = mean(price), \n    .by = c(cut, clarity)\n    )\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 40 × 3\n   cut       clarity price\n   <ord>     <ord>   <dbl>\n 1 Ideal     SI2     4756.\n 2 Premium   SI1     4455.\n 3 Good      VS1     3801.\n 4 Premium   VS2     4550.\n 5 Good      SI2     4580.\n 6 Very Good VVS2    3038.\n 7 Very Good VVS1    2459.\n 8 Very Good SI1     3932.\n 9 Fair      VS2     4175.\n10 Very Good VS1     3805.\n# ℹ 30 more rows\n```\n:::\n:::\n\n\n# `dplyr` 合并\n\n匹配的本质是扩充数据。假设我们有一个班级学生的花名册，同时我们得到了这批学生期中成绩的整洁数据。我们可以选择根据期中成绩的数据，逐一输入花名册里；也可以选择通过匹配的方式，快速在学生的花名册中生成“期中成绩”这个新的变量。\n\n## `dplyr` 函数组合\n\n当多个 dplyr 函数组合时，我默认会使用管道函数 `%>%`。下面是一个例子：\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\n# 先把 price 放到开头，再对它降序排列（从高到低）\ndiamonds %>%\n  relocate(price) %>%\n  arrange(-price)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 53,940 × 10\n   price carat cut       color clarity depth table     x     y     z\n   <int> <dbl> <ord>     <ord> <ord>   <dbl> <dbl> <dbl> <dbl> <dbl>\n 1 18823  2.29 Premium   I     VS2      60.8    60  8.5   8.47  5.16\n 2 18818  2    Very Good G     SI1      63.5    56  7.9   7.97  5.04\n 3 18806  1.51 Ideal     G     IF       61.7    55  7.37  7.41  4.56\n 4 18804  2.07 Ideal     G     SI2      62.5    55  8.2   8.13  5.11\n 5 18803  2    Very Good H     SI1      62.8    57  7.95  8     5.01\n 6 18797  2.29 Premium   I     SI1      61.8    59  8.52  8.45  5.24\n 7 18795  2.04 Premium   H     SI1      58.1    60  8.37  8.28  4.84\n 8 18795  2    Premium   I     VS1      60.8    59  8.13  8.02  4.91\n 9 18791  1.71 Premium   F     VS2      62.3    59  7.57  7.53  4.7 \n10 18791  2.15 Ideal     G     SI2      62.6    54  8.29  8.35  5.21\n# ℹ 53,930 more rows\n```\n:::\n:::\n\n\n当然，`relocate()` 和 `arrange()` 都有一些更高级的应用，比方说对多个变量排序、根据多个变量的取值排序等。这些就留待进阶部分再详细讲解了。\n",
    "supporting": [],
    "filters": ["rmarkdown/pagebreak.lua"],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}
